
counter0-99.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001e6  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000027a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000009d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000599  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ca  00000000  00000000  00001009  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000413  00000000  00000000  000011d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000015e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000154  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000027  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000017a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  8a:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <seven_segment_write>:
}
//function for setting and clearing the required pins responsible for writing each number on each seven segment
void seven_segment_write(unsigned char counter)
{
	//for writing '0' on the seven segment
	if (counter == 0)
  92:	88 23       	and	r24, r24
  94:	29 f4       	brne	.+10     	; 0xa0 <seven_segment_write+0xe>
	{
		CLR_BIT(PORTB , PINB0);
  96:	c0 98       	cbi	0x18, 0	; 24
		CLR_BIT(PORTB , PINB1);
  98:	c1 98       	cbi	0x18, 1	; 24
		CLR_BIT(PORTB , PINB2);
  9a:	c2 98       	cbi	0x18, 2	; 24
		CLR_BIT(PORTB , PINB4);
  9c:	c4 98       	cbi	0x18, 4	; 24
  9e:	08 95       	ret
	}
	//for writing '1' on the seven segment
	else if (counter ==1)
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	29 f4       	brne	.+10     	; 0xae <seven_segment_write+0x1c>
	{
		SET_BIT(PORTB , PINB0);
  a4:	c0 9a       	sbi	0x18, 0	; 24
		CLR_BIT(PORTB , PINB1);
  a6:	c1 98       	cbi	0x18, 1	; 24
		CLR_BIT(PORTB , PINB2);
  a8:	c2 98       	cbi	0x18, 2	; 24
		CLR_BIT(PORTB , PINB4);
  aa:	c4 98       	cbi	0x18, 4	; 24
  ac:	08 95       	ret
	}
	//for writing '2' on the seven segment
	else if (counter ==2)
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	29 f4       	brne	.+10     	; 0xbc <seven_segment_write+0x2a>
	{
		CLR_BIT(PORTB , PINB0);
  b2:	c0 98       	cbi	0x18, 0	; 24
		SET_BIT(PORTB , PINB1);
  b4:	c1 9a       	sbi	0x18, 1	; 24
		CLR_BIT(PORTB , PINB2);
  b6:	c2 98       	cbi	0x18, 2	; 24
		CLR_BIT(PORTB , PINB4);
  b8:	c4 98       	cbi	0x18, 4	; 24
  ba:	08 95       	ret
	}
	//for writing '3' on the seven segment
	else if (counter ==3)
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	29 f4       	brne	.+10     	; 0xca <seven_segment_write+0x38>
	{
		SET_BIT(PORTB , PINB0);
  c0:	c0 9a       	sbi	0x18, 0	; 24
		SET_BIT(PORTB , PINB1);
  c2:	c1 9a       	sbi	0x18, 1	; 24
		CLR_BIT(PORTB , PINB2);
  c4:	c2 98       	cbi	0x18, 2	; 24
		CLR_BIT(PORTB , PINB4);
  c6:	c4 98       	cbi	0x18, 4	; 24
  c8:	08 95       	ret
	}
	//for writing '4' on the seven segment
	else if (counter ==4)
  ca:	84 30       	cpi	r24, 0x04	; 4
  cc:	29 f4       	brne	.+10     	; 0xd8 <seven_segment_write+0x46>
	{
		CLR_BIT(PORTB , PINB0);
  ce:	c0 98       	cbi	0x18, 0	; 24
		CLR_BIT(PORTB , PINB1);
  d0:	c1 98       	cbi	0x18, 1	; 24
		SET_BIT(PORTB , PINB2);
  d2:	c2 9a       	sbi	0x18, 2	; 24
		CLR_BIT(PORTB , PINB4);
  d4:	c4 98       	cbi	0x18, 4	; 24
  d6:	08 95       	ret
	}
	//for writing '5' on the seven segment
	else if (counter ==5)
  d8:	85 30       	cpi	r24, 0x05	; 5
  da:	29 f4       	brne	.+10     	; 0xe6 <seven_segment_write+0x54>
	{
		SET_BIT(PORTB , PINB0);
  dc:	c0 9a       	sbi	0x18, 0	; 24
		CLR_BIT(PORTB , PINB1);
  de:	c1 98       	cbi	0x18, 1	; 24
		SET_BIT(PORTB , PINB2);
  e0:	c2 9a       	sbi	0x18, 2	; 24
		CLR_BIT(PORTB , PINB4);
  e2:	c4 98       	cbi	0x18, 4	; 24
  e4:	08 95       	ret
	}
	//for writing '6' on the seven segment
	else if (counter ==6)
  e6:	86 30       	cpi	r24, 0x06	; 6
  e8:	29 f4       	brne	.+10     	; 0xf4 <seven_segment_write+0x62>
	{
		CLR_BIT(PORTB , PINB0);
  ea:	c0 98       	cbi	0x18, 0	; 24
		SET_BIT(PORTB , PINB1);
  ec:	c1 9a       	sbi	0x18, 1	; 24
		SET_BIT(PORTB , PINB2);
  ee:	c2 9a       	sbi	0x18, 2	; 24
		CLR_BIT(PORTB , PINB4);
  f0:	c4 98       	cbi	0x18, 4	; 24
  f2:	08 95       	ret
	}
	//for writing '7' on the seven segment
	else if (counter ==7)
  f4:	87 30       	cpi	r24, 0x07	; 7
  f6:	29 f4       	brne	.+10     	; 0x102 <seven_segment_write+0x70>
	{
		SET_BIT(PORTB , PINB0);
  f8:	c0 9a       	sbi	0x18, 0	; 24
		SET_BIT(PORTB , PINB1);
  fa:	c1 9a       	sbi	0x18, 1	; 24
		SET_BIT(PORTB , PINB2);
  fc:	c2 9a       	sbi	0x18, 2	; 24
		CLR_BIT(PORTB , PINB4);
  fe:	c4 98       	cbi	0x18, 4	; 24
 100:	08 95       	ret
	}
	//for writing '8' on the seven segment
	else if (counter ==8)
 102:	88 30       	cpi	r24, 0x08	; 8
 104:	29 f4       	brne	.+10     	; 0x110 <seven_segment_write+0x7e>
	{
		CLR_BIT(PORTB , PINB0);
 106:	c0 98       	cbi	0x18, 0	; 24
		CLR_BIT(PORTB , PINB1);
 108:	c1 98       	cbi	0x18, 1	; 24
		CLR_BIT(PORTB , PINB2);
 10a:	c2 98       	cbi	0x18, 2	; 24
		SET_BIT(PORTB , PINB4);
 10c:	c4 9a       	sbi	0x18, 4	; 24
 10e:	08 95       	ret
	}
	//for writing '9' on the seven segment
	else if (counter ==9)
 110:	89 30       	cpi	r24, 0x09	; 9
 112:	21 f4       	brne	.+8      	; 0x11c <seven_segment_write+0x8a>
	{
		SET_BIT(PORTB , PINB0);
 114:	c0 9a       	sbi	0x18, 0	; 24
		CLR_BIT(PORTB , PINB1);
 116:	c1 98       	cbi	0x18, 1	; 24
		CLR_BIT(PORTB , PINB2);
 118:	c2 98       	cbi	0x18, 2	; 24
		SET_BIT(PORTB , PINB4);
 11a:	c4 9a       	sbi	0x18, 4	; 24
 11c:	08 95       	ret

0000011e <btn_read>:
//function for reading the value on the pin connected to the button 
//to check if the button is on or off
unsigned char btn_read(unsigned char portname , unsigned char pinnumber)
{
	unsigned char x =0;
	x =READ_BIT(portname , pinnumber);
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	06 2e       	mov	r0, r22
 124:	02 c0       	rjmp	.+4      	; 0x12a <btn_read+0xc>
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <btn_read+0x8>
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	28 23       	and	r18, r24
 132:	39 23       	and	r19, r25
 134:	c9 01       	movw	r24, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <btn_read+0x1e>
 138:	95 95       	asr	r25
 13a:	87 95       	ror	r24
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <btn_read+0x1a>
	return x;
	
}
 140:	08 95       	ret

00000142 <main>:
unsigned char counter=0;

int main(void)
{
	
	DDRB |= (1<<PINB0) |(1<<PINB1) |(1<<PINB2) |(1<<PINB4) |(1<<PINB5) |(1<<PINB6);
 142:	87 b3       	in	r24, 0x17	; 23
 144:	87 67       	ori	r24, 0x77	; 119
 146:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(DDRB , PINB3);
 148:	bb 98       	cbi	0x17, 3	; 23
	
	
	SET_BIT(PORTB , PINB5);
 14a:	c5 9a       	sbi	0x18, 5	; 24
	SET_BIT(PORTB , PINB6);
 14c:	c6 9a       	sbi	0x18, 6	; 24
//defining global variables
unsigned char btn =0;
unsigned char counter=0;

int main(void)
{
 14e:	0f 2e       	mov	r0, r31
 150:	fa e0       	ldi	r31, 0x0A	; 10
 152:	ef 2e       	mov	r14, r31
 154:	ff 24       	eor	r15, r15
 156:	f0 2d       	mov	r31, r0
		}			
			
		for (int i=0 ; i<10 ; i++)
		{
			
			seven_segment_write(counter%10);
 158:	1a e0       	ldi	r17, 0x0A	; 10
	SET_BIT(PORTB , PINB5);
	SET_BIT(PORTB , PINB6);
	
    while(1)
    {
		btn= btn_read(PINB , PINB3);
 15a:	86 b3       	in	r24, 0x16	; 22
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	0e 94 8f 00 	call	0x11e	; 0x11e <btn_read>
 162:	80 93 61 00 	sts	0x0061, r24
		if (btn ==1 && counter <100)
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	39 f4       	brne	.+14     	; 0x178 <main+0x36>
 16a:	80 91 60 00 	lds	r24, 0x0060
 16e:	84 36       	cpi	r24, 0x64	; 100
 170:	18 f4       	brcc	.+6      	; 0x178 <main+0x36>
		{
			counter += 1;
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 60 00 	sts	0x0060, r24
//defining global variables
unsigned char btn =0;
unsigned char counter=0;

int main(void)
{
 178:	e7 01       	movw	r28, r14
		}			
			
		for (int i=0 ; i<10 ; i++)
		{
			
			seven_segment_write(counter%10);
 17a:	80 91 60 00 	lds	r24, 0x0060
 17e:	61 2f       	mov	r22, r17
 180:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__udivmodqi4>
 184:	89 2f       	mov	r24, r25
 186:	0e 94 49 00 	call	0x92	; 0x92 <seven_segment_write>
			SET_BIT(PORTB , PINB5);
 18a:	c5 9a       	sbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8f e3       	ldi	r24, 0x3F	; 63
 18e:	9c e9       	ldi	r25, 0x9C	; 156
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x4e>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x54>
 196:	00 00       	nop
			//delay for displaying the units on the seven segment before displaying the tenths on the other seven segment
			_delay_ms(10);
			CLR_BIT(PORTB , PINB5);
 198:	c5 98       	cbi	0x18, 5	; 24
			
			seven_segment_write(counter/10);
 19a:	80 91 60 00 	lds	r24, 0x0060
 19e:	61 2f       	mov	r22, r17
 1a0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__udivmodqi4>
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <seven_segment_write>
			SET_BIT(PORTB , PINB6);
 1a8:	c6 9a       	sbi	0x18, 6	; 24
 1aa:	8f e3       	ldi	r24, 0x3F	; 63
 1ac:	9c e9       	ldi	r25, 0x9C	; 156
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x6c>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x72>
 1b4:	00 00       	nop
			//delay for displaying the tenths on the seven segment before displaying the units on the other seven segment
			_delay_ms(10);
			CLR_BIT(PORTB , PINB6);
 1b6:	c6 98       	cbi	0x18, 6	; 24
 1b8:	21 97       	sbiw	r28, 0x01	; 1
		if (btn ==1 && counter <100)
		{
			counter += 1;
		}			
			
		for (int i=0 ; i<10 ; i++)
 1ba:	f9 f6       	brne	.-66     	; 0x17a <main+0x38>
			_delay_ms(10);
			CLR_BIT(PORTB , PINB6);
		}
			
	    //to restart counting after writing 99 on the seven segments
		 if(counter>= 100)
 1bc:	80 91 60 00 	lds	r24, 0x0060
 1c0:	84 36       	cpi	r24, 0x64	; 100
 1c2:	58 f2       	brcs	.-106    	; 0x15a <main+0x18>
		{
			counter=0;	
 1c4:	10 92 60 00 	sts	0x0060, r1
 1c8:	c8 cf       	rjmp	.-112    	; 0x15a <main+0x18>

000001ca <__udivmodqi4>:
 1ca:	99 1b       	sub	r25, r25
 1cc:	79 e0       	ldi	r23, 0x09	; 9
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <__udivmodqi4_ep>

000001d0 <__udivmodqi4_loop>:
 1d0:	99 1f       	adc	r25, r25
 1d2:	96 17       	cp	r25, r22
 1d4:	08 f0       	brcs	.+2      	; 0x1d8 <__udivmodqi4_ep>
 1d6:	96 1b       	sub	r25, r22

000001d8 <__udivmodqi4_ep>:
 1d8:	88 1f       	adc	r24, r24
 1da:	7a 95       	dec	r23
 1dc:	c9 f7       	brne	.-14     	; 0x1d0 <__udivmodqi4_loop>
 1de:	80 95       	com	r24
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
