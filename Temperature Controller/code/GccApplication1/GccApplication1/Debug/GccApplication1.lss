
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001218  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  00001218  000012ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800102  00800102  0000134e  2**0
                  ALLOC
  3 .stab         00002388  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000070e  00000000  00000000  000036d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00003de8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e17  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d14  00000000  00000000  00005e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000108c  00000000  00000000  00006b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  00007bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000707  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e3c  00000000  00000000  00008803  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000963f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 30       	cpi	r26, 0x07	; 7
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ad 04 	call	0x95a	; 0x95a <main>
      8a:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CONFIG_VREF>:
	SET_BIT(ADCSRA,ADPS1);
}

void CONFIG_VREF(void)
{
	SET_BIT(ADMUX,REFS0);
      92:	3e 9a       	sbi	0x07, 6	; 7
}
      94:	08 95       	ret

00000096 <ENABLE_ADC>:

void ENABLE_ADC(void)
{
	SET_BIT(ADCSRA,ADEN);	
      96:	37 9a       	sbi	0x06, 7	; 6
}
      98:	08 95       	ret

0000009a <ADC_Init>:
#include "ADC.h"
#include "ADC_Cfg.h"

void ADC_Init(void)
{
	CONFIG_VREF();
      9a:	0e 94 49 00 	call	0x92	; 0x92 <CONFIG_VREF>
	ENABLE_ADC();
      9e:	0e 94 4b 00 	call	0x96	; 0x96 <ENABLE_ADC>
	SET_BIT(ADCSRA,ADPS2);
      a2:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
      a4:	31 9a       	sbi	0x06, 1	; 6
}
      a6:	08 95       	ret

000000a8 <START_CONV>:
}


void START_CONV(void)
{
	SET_BIT(ADCSRA,ADSC);
      a8:	36 9a       	sbi	0x06, 6	; 6
}
      aa:	08 95       	ret

000000ac <CLR_ADIF>:


void CLR_ADIF(void)
{
	SET_BIT(ADCSRA,ADIF);
      ac:	34 9a       	sbi	0x06, 4	; 6
}
      ae:	08 95       	ret

000000b0 <ADC_Read>:

uint8 ADC_Read(void)
{
	uint8 ReadValue;
	START_CONV();
      b0:	0e 94 54 00 	call	0xa8	; 0xa8 <START_CONV>
	while(CHECK_ADIF);
      b4:	34 9b       	sbis	0x06, 4	; 6
      b6:	fe cf       	rjmp	.-4      	; 0xb4 <ADC_Read+0x4>
	CLR_ADIF();
      b8:	0e 94 56 00 	call	0xac	; 0xac <CLR_ADIF>
	ReadValue = (ADCL);
      bc:	84 b1       	in	r24, 0x04	; 4
	ReadValue |= (ADCH << 8);
      be:	95 b1       	in	r25, 0x05	; 5
	return ReadValue;
      c0:	08 95       	ret

000000c2 <Target_v>:

#include "LCD.h"
double Target_v(uint8 Set_temp, uint8 curr_temp)
{
	double v_t;
	if (Set_temp >curr_temp)
      c2:	68 17       	cp	r22, r24
      c4:	c0 f4       	brcc	.+48     	; 0xf6 <Target_v+0x34>
	{
		double step1= (Set_temp - curr_temp)/100.0;
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	9c 01       	movw	r18, r24
      ca:	26 1b       	sub	r18, r22
      cc:	31 09       	sbc	r19, r1
      ce:	b9 01       	movw	r22, r18
      d0:	88 27       	eor	r24, r24
      d2:	77 fd       	sbrc	r23, 7
      d4:	80 95       	com	r24
      d6:	98 2f       	mov	r25, r24
      d8:	0e 94 ca 07 	call	0xf94	; 0xf94 <__floatsisf>
      dc:	20 e0       	ldi	r18, 0x00	; 0
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	48 ec       	ldi	r20, 0xC8	; 200
      e2:	52 e4       	ldi	r21, 0x42	; 66
      e4:	0e 94 34 07 	call	0xe68	; 0xe68 <__divsf3>
		v_t= step1 * 10;
      e8:	20 e0       	ldi	r18, 0x00	; 0
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	40 e2       	ldi	r20, 0x20	; 32
      ee:	51 e4       	ldi	r21, 0x41	; 65
      f0:	0e 94 56 08 	call	0x10ac	; 0x10ac <__mulsf3>
      f4:	04 c0       	rjmp	.+8      	; 0xfe <Target_v+0x3c>
	}
	else
	{
		v_t = 0;
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return v_t;
}
      fe:	38 2f       	mov	r19, r24
     100:	29 2f       	mov	r18, r25
     102:	86 2f       	mov	r24, r22
     104:	97 2f       	mov	r25, r23
     106:	a3 2f       	mov	r26, r19
     108:	b2 2f       	mov	r27, r18
     10a:	bc 01       	movw	r22, r24
     10c:	cd 01       	movw	r24, r26
     10e:	08 95       	ret

00000110 <adc_map_volt>:

double adc_map_volt(void)
{
	double adc_val= ADC_Read();
     110:	0e 94 58 00 	call	0xb0	; 0xb0 <ADC_Read>
     114:	68 2f       	mov	r22, r24
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 c8 07 	call	0xf90	; 0xf90 <__floatunsisf>
	double Adc_maped_val = (adc_val/255.0)*5;
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	4f e7       	ldi	r20, 0x7F	; 127
     126:	53 e4       	ldi	r21, 0x43	; 67
     128:	0e 94 34 07 	call	0xe68	; 0xe68 <__divsf3>
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	40 ea       	ldi	r20, 0xA0	; 160
     132:	50 e4       	ldi	r21, 0x40	; 64
     134:	0e 94 56 08 	call	0x10ac	; 0x10ac <__mulsf3>
	return Adc_maped_val;
	
}
     138:	46 2f       	mov	r20, r22
     13a:	57 2f       	mov	r21, r23
     13c:	68 2f       	mov	r22, r24
     13e:	79 2f       	mov	r23, r25
     140:	cb 01       	movw	r24, r22
     142:	ba 01       	movw	r22, r20
     144:	08 95       	ret

00000146 <pwm>:
void pwm(uint8 Set_temp, uint8 curr_temp)
{
     146:	cf 92       	push	r12
     148:	df 92       	push	r13
     14a:	ef 92       	push	r14
     14c:	ff 92       	push	r15
	double V_t=Target_v(Set_temp , curr_temp);
     14e:	0e 94 61 00 	call	0xc2	; 0xc2 <Target_v>
     152:	6b 01       	movw	r12, r22
     154:	7c 01       	movw	r14, r24
	double V_r= adc_map_volt();
     156:	0e 94 88 00 	call	0x110	; 0x110 <adc_map_volt>
     15a:	9b 01       	movw	r18, r22
     15c:	ac 01       	movw	r20, r24
	double duty_cycle_percentage = (((V_r *2 )/10.0)*V_t)/10.0;
     15e:	0e 94 d0 06 	call	0xda0	; 0xda0 <__addsf3>
     162:	20 e0       	ldi	r18, 0x00	; 0
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	40 e2       	ldi	r20, 0x20	; 32
     168:	51 e4       	ldi	r21, 0x41	; 65
     16a:	0e 94 34 07 	call	0xe68	; 0xe68 <__divsf3>
     16e:	a7 01       	movw	r20, r14
     170:	96 01       	movw	r18, r12
     172:	0e 94 56 08 	call	0x10ac	; 0x10ac <__mulsf3>
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	40 e2       	ldi	r20, 0x20	; 32
     17c:	51 e4       	ldi	r21, 0x41	; 65
     17e:	0e 94 34 07 	call	0xe68	; 0xe68 <__divsf3>
	double ocr_val= 256 * duty_cycle_percentage;
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e8       	ldi	r20, 0x80	; 128
     188:	53 e4       	ldi	r21, 0x43	; 67
     18a:	0e 94 56 08 	call	0x10ac	; 0x10ac <__mulsf3>
	
	timer_pwm(ocr_val );
     18e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <timer_pwm>
	
}
     192:	ff 90       	pop	r15
     194:	ef 90       	pop	r14
     196:	df 90       	pop	r13
     198:	cf 90       	pop	r12
     19a:	08 95       	ret

0000019c <Timer_2_CTC_Init_Interrupt>:
#include <avr/io.h>
#include <avr/interrupt.h>
void Timer_2_CTC_Init_Interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR2,WGM21);
     19c:	85 b5       	in	r24, 0x25	; 37
     19e:	88 60       	ori	r24, 0x08	; 8
     1a0:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,WGM20);
     1a2:	85 b5       	in	r24, 0x25	; 37
     1a4:	8f 7b       	andi	r24, 0xBF	; 191
     1a6:	85 bd       	out	0x25, r24	; 37
	/* load a value in OCR0 */
	OCR0=0x62;   //initiate interrupt each 10ms
     1a8:	82 e6       	ldi	r24, 0x62	; 98
     1aa:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR2,CS20);
     1ac:	85 b5       	in	r24, 0x25	; 37
     1ae:	81 60       	ori	r24, 0x01	; 1
     1b0:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
     1b2:	85 b5       	in	r24, 0x25	; 37
     1b4:	84 60       	ori	r24, 0x04	; 4
     1b6:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS21);
     1b8:	85 b5       	in	r24, 0x25	; 37
     1ba:	82 60       	ori	r24, 0x02	; 2
     1bc:	85 bd       	out	0x25, r24	; 37
	/* enable interrupt*/
	sei();
     1be:	78 94       	sei
	SET_BIT(TIMSK,OCIE2);
     1c0:	89 b7       	in	r24, 0x39	; 57
     1c2:	80 68       	ori	r24, 0x80	; 128
     1c4:	89 bf       	out	0x39, r24	; 57
}
     1c6:	08 95       	ret

000001c8 <Timer_2_CTC_off>:


void Timer_2_CTC_off(void)
{
	//CLR_BIT(TIMSK,OCIE0);
	CLR_BIT(TIMSK,OCIE2);
     1c8:	89 b7       	in	r24, 0x39	; 57
     1ca:	8f 77       	andi	r24, 0x7F	; 127
     1cc:	89 bf       	out	0x39, r24	; 57
     1ce:	08 95       	ret

000001d0 <timer_pwm>:


void timer_pwm(double ocr_value)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     1d0:	bb 9a       	sbi	0x17, 3	; 23
	
	SET_BIT(TCCR0,WGM00);
     1d2:	23 b7       	in	r18, 0x33	; 51
     1d4:	20 64       	ori	r18, 0x40	; 64
     1d6:	23 bf       	out	0x33, r18	; 51
	SET_BIT(TCCR0,WGM01);
     1d8:	23 b7       	in	r18, 0x33	; 51
     1da:	28 60       	ori	r18, 0x08	; 8
     1dc:	23 bf       	out	0x33, r18	; 51
	
	OCR0=ocr_value ;
     1de:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fixunssfsi>
     1e2:	6c bf       	out	0x3c, r22	; 60
	
	SET_BIT(TCCR0,CS00);
     1e4:	83 b7       	in	r24, 0x33	; 51
     1e6:	81 60       	ori	r24, 0x01	; 1
     1e8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
     1ea:	83 b7       	in	r24, 0x33	; 51
     1ec:	84 60       	ori	r24, 0x04	; 4
     1ee:	83 bf       	out	0x33, r24	; 51
	//SET_BIT(TCCR0,CS01);
	
	SET_BIT(TCCR0,COM01);
     1f0:	83 b7       	in	r24, 0x33	; 51
     1f2:	80 62       	ori	r24, 0x20	; 32
     1f4:	83 bf       	out	0x33, r24	; 51
	
	
     1f6:	08 95       	ret

000001f8 <Welcom_Screen>:
#include "TYPE_DEFs.h"
#include "LCD.h"
#define F_CPU 1000000ul
#include <util/delay.h>
void Welcom_Screen(void)
{
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
	LCD_Move_Cursor(0,9);
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	69 e0       	ldi	r22, 0x09	; 9
     206:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LCD_Move_Cursor>
	uint8 data ="Welcome";
     20a:	83 e6       	ldi	r24, 0x63	; 99
     20c:	90 e0       	ldi	r25, 0x00	; 0
	LCD_Send_String(data);
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_Send_String>
     214:	13 e0       	ldi	r17, 0x03	; 3
#include "TYPE_DEFs.h"
#include "LCD.h"
#define F_CPU 1000000ul
#include <util/delay.h>
void Welcom_Screen(void)
{
     216:	ff 24       	eor	r15, r15
     218:	f3 94       	inc	r15
	
	for(i=0;i<3;i++)
	{
		for(k=0;k<2;k++)
		{
			if (k==0)
     21a:	09 e0       	ldi	r16, 0x09	; 9
     21c:	20 c0       	rjmp	.+64     	; 0x25e <Welcom_Screen+0x66>
#include <util/delay.h>
void Welcom_Screen(void)
{
	LCD_Move_Cursor(0,9);
	uint8 data ="Welcome";
	LCD_Send_String(data);
     21e:	df 5f       	subi	r29, 0xFF	; 255
	
	for(i=0;i<3;i++)
	{
		for(k=0;k<2;k++)
		{
			if (k==0)
     220:	d1 30       	cpi	r29, 0x01	; 1
     222:	69 f4       	brne	.+26     	; 0x23e <Welcom_Screen+0x46>
     224:	c0 2f       	mov	r28, r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     226:	87 ea       	ldi	r24, 0xA7	; 167
     228:	91 e6       	ldi	r25, 0x61	; 97
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <Welcom_Screen+0x32>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <Welcom_Screen+0x38>
     230:	00 00       	nop
			{
				for(j=0;j<9;j++)
				{
					_delay_ms(100);
					LCD_Send_Cmd(DISPLAY_SHIFT_L);
     232:	88 e1       	ldi	r24, 0x18	; 24
     234:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_Send_Cmd>
     238:	c1 50       	subi	r28, 0x01	; 1
	{
		for(k=0;k<2;k++)
		{
			if (k==0)
			{
				for(j=0;j<9;j++)
     23a:	a9 f7       	brne	.-22     	; 0x226 <Welcom_Screen+0x2e>
     23c:	f0 cf       	rjmp	.-32     	; 0x21e <Welcom_Screen+0x26>
	
	for(i=0;i<3;i++)
	{
		for(k=0;k<2;k++)
		{
			if (k==0)
     23e:	c0 2f       	mov	r28, r16
     240:	87 ea       	ldi	r24, 0xA7	; 167
     242:	91 e6       	ldi	r25, 0x61	; 97
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <Welcom_Screen+0x4c>
     248:	00 c0       	rjmp	.+0      	; 0x24a <Welcom_Screen+0x52>
     24a:	00 00       	nop
			else
			{
				for(j=0;j<9;j++)
				{
					_delay_ms(100);
					LCD_Send_Cmd(DISPLAY_SHIFT_R);
     24c:	8c e1       	ldi	r24, 0x1C	; 28
     24e:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_Send_Cmd>
     252:	c1 50       	subi	r28, 0x01	; 1
				}
				
			}
			else
			{
				for(j=0;j<9;j++)
     254:	a9 f7       	brne	.-22     	; 0x240 <Welcom_Screen+0x48>
	
	uint8 i,k,j;
	
	for(i=0;i<3;i++)
	{
		for(k=0;k<2;k++)
     256:	d2 30       	cpi	r29, 0x02	; 2
     258:	10 f3       	brcs	.-60     	; 0x21e <Welcom_Screen+0x26>
     25a:	11 50       	subi	r17, 0x01	; 1
	
	
	
	uint8 i,k,j;
	
	for(i=0;i<3;i++)
     25c:	11 f0       	breq	.+4      	; 0x262 <Welcom_Screen+0x6a>
#include "TYPE_DEFs.h"
#include "LCD.h"
#define F_CPU 1000000ul
#include <util/delay.h>
void Welcom_Screen(void)
{
     25e:	df 2d       	mov	r29, r15
     260:	df cf       	rjmp	.-66     	; 0x220 <Welcom_Screen+0x28>
			}
		}
	}
	
	
}
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	1f 91       	pop	r17
     268:	0f 91       	pop	r16
     26a:	ff 90       	pop	r15
     26c:	08 95       	ret

0000026e <IDLE_Screen>:


void IDLE_Screen(void)
{
	LCD_ClearScreen();
     26e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <LCD_ClearScreen>
	
	LCD_Send_Cmd(ENTRY_MODE); //entry mode
     272:	86 e0       	ldi	r24, 0x06	; 6
     274:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_Send_Cmd>
	
	// set temp
	LCD_Move_Cursor(0,0);
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LCD_Move_Cursor>
	LCD_Send_String("SET:25");
     280:	8b e6       	ldi	r24, 0x6B	; 107
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_Send_String>
	LCD_Send_Char();
	
	LCD_Move_Cursor(0,5);
	LCD_Send_Char(*bit_l);*/
	//Current temp
	LCD_Move_Cursor(0,10);
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	6a e0       	ldi	r22, 0x0A	; 10
     28c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LCD_Move_Cursor>
	LCD_Send_String("CRT:--");
     290:	82 e7       	ldi	r24, 0x72	; 114
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_Send_String>
	
	//system state
	LCD_Move_Cursor(1,0);
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LCD_Move_Cursor>
	LCD_Send_String("STATE:STANDBY");
     2a0:	89 e7       	ldi	r24, 0x79	; 121
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_Send_String>
	
}
     2a8:	08 95       	ret

000002aa <Display_M_L_bit>:



void Display_M_L_bit(char_t bit_m, char_t bit_l, uint8 Cursor)
{
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	64 97       	sbiw	r28, 0x14	; 20
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	18 2f       	mov	r17, r24
     2c4:	04 2f       	mov	r16, r20
	
	char_t conc= (bit_m*10) + bit_l;
     2c6:	88 0f       	add	r24, r24
     2c8:	98 2f       	mov	r25, r24
     2ca:	99 0f       	add	r25, r25
     2cc:	99 0f       	add	r25, r25
     2ce:	89 0f       	add	r24, r25
	char temp_value[20];
	itoa(conc,temp_value,10);
     2d0:	86 0f       	add	r24, r22
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	be 01       	movw	r22, r28
     2d6:	6f 5f       	subi	r22, 0xFF	; 255
     2d8:	7f 4f       	sbci	r23, 0xFF	; 255
     2da:	4a e0       	ldi	r20, 0x0A	; 10
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	0e 94 c5 08 	call	0x118a	; 0x118a <itoa>
	if ( bit_m == 0)
     2e2:	11 23       	and	r17, r17
     2e4:	89 f4       	brne	.+34     	; 0x308 <Display_M_L_bit+0x5e>
	{
		LCD_Move_Cursor(0,Cursor);
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	60 2f       	mov	r22, r16
     2ea:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LCD_Move_Cursor>
		LCD_Send_Char('0');
     2ee:	80 e3       	ldi	r24, 0x30	; 48
     2f0:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_Send_Char>
		LCD_Move_Cursor(0,(Cursor+1));
     2f4:	60 2f       	mov	r22, r16
     2f6:	6f 5f       	subi	r22, 0xFF	; 255
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LCD_Move_Cursor>
		LCD_Send_String(temp_value);
     2fe:	ce 01       	movw	r24, r28
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_Send_String>
     306:	08 c0       	rjmp	.+16     	; 0x318 <Display_M_L_bit+0x6e>
	}
	else
	{
		LCD_Move_Cursor(0,Cursor);
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	60 2f       	mov	r22, r16
     30c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LCD_Move_Cursor>
		LCD_Send_String(temp_value);
     310:	ce 01       	movw	r24, r28
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_Send_String>
	}
}
     318:	64 96       	adiw	r28, 0x14	; 20
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	de bf       	out	0x3e, r29	; 62
     320:	0f be       	out	0x3f, r0	; 63
     322:	cd bf       	out	0x3d, r28	; 61
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
     32c:	08 95       	ret

0000032e <Display_sys_State>:



void Display_sys_State(uint8 state)
{
     32e:	cf 93       	push	r28
     330:	c8 2f       	mov	r28, r24
	LCD_Move_Cursor(1,6);
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	66 e0       	ldi	r22, 0x06	; 6
     336:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LCD_Move_Cursor>
	LCD_Send_String(state);
     33a:	8c 2f       	mov	r24, r28
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_Send_String>
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <Key_Pad_init>:
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	c2 ea       	ldi	r28, 0xA2	; 162
     354:	d0 e0       	ldi	r29, 0x00	; 0
     356:	ee 24       	eor	r14, r14
     358:	ff 24       	eor	r15, r15
     35a:	68 94       	set
     35c:	e4 f8       	bld	r14, 4
     35e:	ec 0e       	add	r14, r28
     360:	fd 1e       	adc	r15, r29
     362:	fe 01       	movw	r30, r28
     364:	33 97       	sbiw	r30, 0x03	; 3
     366:	00 81       	ld	r16, Z
     368:	fe 01       	movw	r30, r28
     36a:	32 97       	sbiw	r30, 0x02	; 2
     36c:	10 81       	ld	r17, Z
     36e:	fe 01       	movw	r30, r28
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	80 2f       	mov	r24, r16
     374:	61 2f       	mov	r22, r17
     376:	40 81       	ld	r20, Z
     378:	0e 94 16 04 	call	0x82c	; 0x82c <DIO_SetPINDir>
     37c:	80 2f       	mov	r24, r16
     37e:	61 2f       	mov	r22, r17
     380:	48 81       	ld	r20, Y
     382:	0e 94 84 04 	call	0x908	; 0x908 <DIO_Connect_Pull_Up>
     386:	24 96       	adiw	r28, 0x04	; 4
     388:	ce 15       	cp	r28, r14
     38a:	df 05       	cpc	r29, r15
     38c:	51 f7       	brne	.-44     	; 0x362 <Key_Pad_init+0x1c>
     38e:	c6 e9       	ldi	r28, 0x96	; 150
     390:	d0 e0       	ldi	r29, 0x00	; 0
     392:	0f 2e       	mov	r0, r31
     394:	fc e0       	ldi	r31, 0x0C	; 12
     396:	ef 2e       	mov	r14, r31
     398:	ff 24       	eor	r15, r15
     39a:	f0 2d       	mov	r31, r0
     39c:	ec 0e       	add	r14, r28
     39e:	fd 1e       	adc	r15, r29
     3a0:	fe 01       	movw	r30, r28
     3a2:	33 97       	sbiw	r30, 0x03	; 3
     3a4:	00 81       	ld	r16, Z
     3a6:	fe 01       	movw	r30, r28
     3a8:	32 97       	sbiw	r30, 0x02	; 2
     3aa:	10 81       	ld	r17, Z
     3ac:	fe 01       	movw	r30, r28
     3ae:	31 97       	sbiw	r30, 0x01	; 1
     3b0:	80 2f       	mov	r24, r16
     3b2:	61 2f       	mov	r22, r17
     3b4:	40 81       	ld	r20, Z
     3b6:	0e 94 16 04 	call	0x82c	; 0x82c <DIO_SetPINDir>
     3ba:	80 2f       	mov	r24, r16
     3bc:	61 2f       	mov	r22, r17
     3be:	48 81       	ld	r20, Y
     3c0:	0e 94 84 04 	call	0x908	; 0x908 <DIO_Connect_Pull_Up>
     3c4:	24 96       	adiw	r28, 0x04	; 4
     3c6:	ce 15       	cp	r28, r14
     3c8:	df 05       	cpc	r29, r15
     3ca:	51 f7       	brne	.-44     	; 0x3a0 <Key_Pad_init+0x5a>
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	08 95       	ret

000003da <Keypad_CheckPress>:
     3da:	2f 92       	push	r2
     3dc:	3f 92       	push	r3
     3de:	4f 92       	push	r4
     3e0:	5f 92       	push	r5
     3e2:	6f 92       	push	r6
     3e4:	7f 92       	push	r7
     3e6:	8f 92       	push	r8
     3e8:	9f 92       	push	r9
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	00 d0       	rcall	.+0      	; 0x400 <Keypad_CheckPress+0x26>
     400:	0f 92       	push	r0
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	9b 83       	std	Y+3, r25	; 0x03
     408:	8a 83       	std	Y+2, r24	; 0x02
     40a:	8e e4       	ldi	r24, 0x4E	; 78
     40c:	ea 81       	ldd	r30, Y+2	; 0x02
     40e:	fb 81       	ldd	r31, Y+3	; 0x03
     410:	80 83       	st	Z, r24
     412:	80 ea       	ldi	r24, 0xA0	; 160
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	5c 01       	movw	r10, r24
     418:	88 24       	eor	r8, r8
     41a:	99 24       	eor	r9, r9
     41c:	0f 2e       	mov	r0, r31
     41e:	f0 eb       	ldi	r31, 0xB0	; 176
     420:	cf 2e       	mov	r12, r31
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	df 2e       	mov	r13, r31
     426:	f0 2d       	mov	r31, r0
     428:	58 2e       	mov	r5, r24
     42a:	49 2e       	mov	r4, r25
     42c:	4d c0       	rjmp	.+154    	; 0x4c8 <Keypad_CheckPress+0xee>
     42e:	f8 01       	movw	r30, r16
     430:	31 97       	sbiw	r30, 0x01	; 1
     432:	80 81       	ld	r24, Z
     434:	f8 01       	movw	r30, r16
     436:	60 81       	ld	r22, Z
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
     43e:	0c 5f       	subi	r16, 0xFC	; 252
     440:	1f 4f       	sbci	r17, 0xFF	; 255
     442:	0c 15       	cp	r16, r12
     444:	1d 05       	cpc	r17, r13
     446:	99 f7       	brne	.-26     	; 0x42e <Keypad_CheckPress+0x54>
     448:	14 01       	movw	r2, r8
     44a:	f5 01       	movw	r30, r10
     44c:	31 97       	sbiw	r30, 0x01	; 1
     44e:	80 81       	ld	r24, Z
     450:	f5 01       	movw	r30, r10
     452:	60 81       	ld	r22, Z
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
     45a:	04 e9       	ldi	r16, 0x94	; 148
     45c:	10 e0       	ldi	r17, 0x00	; 0
     45e:	ee 24       	eor	r14, r14
     460:	ff 24       	eor	r15, r15
     462:	f8 01       	movw	r30, r16
     464:	31 97       	sbiw	r30, 0x01	; 1
     466:	80 81       	ld	r24, Z
     468:	f8 01       	movw	r30, r16
     46a:	60 81       	ld	r22, Z
     46c:	ae 01       	movw	r20, r28
     46e:	4f 5f       	subi	r20, 0xFF	; 255
     470:	5f 4f       	sbci	r21, 0xFF	; 255
     472:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Read_PIN>
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	88 23       	and	r24, r24
     47a:	91 f4       	brne	.+36     	; 0x4a0 <Keypad_CheckPress+0xc6>
     47c:	c1 01       	movw	r24, r2
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	82 0d       	add	r24, r2
     484:	93 1d       	adc	r25, r3
     486:	8e 0d       	add	r24, r14
     488:	9f 1d       	adc	r25, r15
     48a:	89 57       	subi	r24, 0x79	; 121
     48c:	9f 4f       	sbci	r25, 0xFF	; 255
     48e:	fc 01       	movw	r30, r24
     490:	80 81       	ld	r24, Z
     492:	ea 81       	ldd	r30, Y+2	; 0x02
     494:	fb 81       	ldd	r31, Y+3	; 0x03
     496:	80 83       	st	Z, r24
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	88 23       	and	r24, r24
     49c:	51 f4       	brne	.+20     	; 0x4b2 <Keypad_CheckPress+0xd8>
     49e:	17 c0       	rjmp	.+46     	; 0x4ce <Keypad_CheckPress+0xf4>
     4a0:	08 94       	sec
     4a2:	e1 1c       	adc	r14, r1
     4a4:	f1 1c       	adc	r15, r1
     4a6:	0c 5f       	subi	r16, 0xFC	; 252
     4a8:	1f 4f       	sbci	r17, 0xFF	; 255
     4aa:	f3 e0       	ldi	r31, 0x03	; 3
     4ac:	ef 16       	cp	r14, r31
     4ae:	f1 04       	cpc	r15, r1
     4b0:	c1 f6       	brne	.-80     	; 0x462 <Keypad_CheckPress+0x88>
     4b2:	08 94       	sec
     4b4:	81 1c       	adc	r8, r1
     4b6:	91 1c       	adc	r9, r1
     4b8:	84 e0       	ldi	r24, 0x04	; 4
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	a8 0e       	add	r10, r24
     4be:	b9 1e       	adc	r11, r25
     4c0:	94 e0       	ldi	r25, 0x04	; 4
     4c2:	89 16       	cp	r8, r25
     4c4:	91 04       	cpc	r9, r1
     4c6:	19 f0       	breq	.+6      	; 0x4ce <Keypad_CheckPress+0xf4>
     4c8:	05 2d       	mov	r16, r5
     4ca:	14 2d       	mov	r17, r4
     4cc:	b0 cf       	rjmp	.-160    	; 0x42e <Keypad_CheckPress+0x54>
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	7f 90       	pop	r7
     4ee:	6f 90       	pop	r6
     4f0:	5f 90       	pop	r5
     4f2:	4f 90       	pop	r4
     4f4:	3f 90       	pop	r3
     4f6:	2f 90       	pop	r2
     4f8:	08 95       	ret

000004fa <Send_Falling_Edge>:
	LCD_Send_Cmd(ENTRY_MODE); //entry mode
	//_delay_ms(1);
}
	
static void Send_Falling_Edge(void)
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
	DIO_Write(LCD_E.PORT_id, LCD_E.PIN_num,1);
     4fe:	d0 91 bb 00 	lds	r29, 0x00BB
     502:	c0 91 bc 00 	lds	r28, 0x00BC
     506:	8d 2f       	mov	r24, r29
     508:	6c 2f       	mov	r22, r28
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
     510:	83 ef       	ldi	r24, 0xF3	; 243
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <Send_Falling_Edge+0x1a>
     518:	00 c0       	rjmp	.+0      	; 0x51a <Send_Falling_Edge+0x20>
     51a:	00 00       	nop
	_delay_ms(2);
	DIO_Write(LCD_E.PORT_id, LCD_E.PIN_num,0);
     51c:	8d 2f       	mov	r24, r29
     51e:	6c 2f       	mov	r22, r28
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
	//_delay_ms(2);
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint8 cmd)
{
     52c:	8f 92       	push	r8
     52e:	9f 92       	push	r9
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
		DIO_Write(DATA_Pins[pins_M].PORT_id, DATA_Pins[pins_M].PIN_num , PinValue);
	}
	
	
	DIO_Write(LCD_RS.PORT_id,LCD_RS.PIN_num, 0);
	Send_Falling_Edge();
     544:	0f 2e       	mov	r0, r31
     546:	f4 eb       	ldi	r31, 0xB4	; 180
     548:	ef 2e       	mov	r14, r31
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	ff 2e       	mov	r15, r31
     54e:	f0 2d       	mov	r31, r0
	DIO_Write(LCD_E.PORT_id, LCD_E.PIN_num,0);
	//_delay_ms(2);
}

void LCD_Send_Cmd(uint8 cmd)
{
     550:	e7 01       	movw	r28, r14
     552:	04 e0       	ldi	r16, 0x04	; 4
     554:	10 e0       	ldi	r17, 0x00	; 0
	uint8 pins_M;
	uint8 pins_L;
	for (pins_M = (unsigned char)0; pins_M < LCD_MODE; pins_M++)
	{
		uint8 PinValue;
		PinValue = (cmd & (1 << (pins_M + 4))) >> (pins_M + 4);
     556:	c8 2e       	mov	r12, r24
     558:	dd 24       	eor	r13, r13
     55a:	aa 24       	eor	r10, r10
     55c:	bb 24       	eor	r11, r11
     55e:	a3 94       	inc	r10
     560:	46 01       	movw	r8, r12
	_delay_ms(2);
	DIO_Write(LCD_E.PORT_id, LCD_E.PIN_num,0);
	//_delay_ms(2);
}

void LCD_Send_Cmd(uint8 cmd)
     562:	fe 01       	movw	r30, r28
     564:	31 97       	sbiw	r30, 0x01	; 1
	uint8 pins_M;
	uint8 pins_L;
	for (pins_M = (unsigned char)0; pins_M < LCD_MODE; pins_M++)
	{
		uint8 PinValue;
		PinValue = (cmd & (1 << (pins_M + 4))) >> (pins_M + 4);
     566:	c5 01       	movw	r24, r10
     568:	00 2e       	mov	r0, r16
     56a:	02 c0       	rjmp	.+4      	; 0x570 <LCD_Send_Cmd+0x44>
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	0a 94       	dec	r0
     572:	e2 f7       	brpl	.-8      	; 0x56c <LCD_Send_Cmd+0x40>
     574:	8c 21       	and	r24, r12
     576:	9d 21       	and	r25, r13
     578:	9c 01       	movw	r18, r24
     57a:	00 2e       	mov	r0, r16
     57c:	02 c0       	rjmp	.+4      	; 0x582 <LCD_Send_Cmd+0x56>
     57e:	35 95       	asr	r19
     580:	27 95       	ror	r18
     582:	0a 94       	dec	r0
     584:	e2 f7       	brpl	.-8      	; 0x57e <LCD_Send_Cmd+0x52>
     586:	a9 01       	movw	r20, r18
		
		DIO_Write(DATA_Pins[pins_M].PORT_id, DATA_Pins[pins_M].PIN_num , PinValue);
     588:	80 81       	ld	r24, Z
     58a:	68 81       	ld	r22, Y
     58c:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
     590:	0f 5f       	subi	r16, 0xFF	; 255
     592:	1f 4f       	sbci	r17, 0xFF	; 255
     594:	22 96       	adiw	r28, 0x02	; 2

void LCD_Send_Cmd(uint8 cmd)
{
	uint8 pins_M;
	uint8 pins_L;
	for (pins_M = (unsigned char)0; pins_M < LCD_MODE; pins_M++)
     596:	08 30       	cpi	r16, 0x08	; 8
     598:	11 05       	cpc	r17, r1
     59a:	11 f7       	brne	.-60     	; 0x560 <LCD_Send_Cmd+0x34>
		
		DIO_Write(DATA_Pins[pins_M].PORT_id, DATA_Pins[pins_M].PIN_num , PinValue);
	}
	
	
	DIO_Write(LCD_RS.PORT_id,LCD_RS.PIN_num, 0);
     59c:	c0 90 bf 00 	lds	r12, 0x00BF
     5a0:	a0 90 c0 00 	lds	r10, 0x00C0
     5a4:	8c 2d       	mov	r24, r12
     5a6:	6a 2d       	mov	r22, r10
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
	Send_Falling_Edge();
     5ae:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Send_Falling_Edge>
     5b2:	c0 e0       	ldi	r28, 0x00	; 0
     5b4:	d0 e0       	ldi	r29, 0x00	; 0
	for (pins_L = (unsigned char)0; pins_L < LCD_MODE; pins_L++)
	{
		uint8 PinValue;
		PinValue = (cmd & (1 << pins_L)) >> pins_L;
     5b6:	01 e0       	ldi	r16, 0x01	; 1
     5b8:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(2);
	DIO_Write(LCD_E.PORT_id, LCD_E.PIN_num,0);
	//_delay_ms(2);
}

void LCD_Send_Cmd(uint8 cmd)
     5ba:	f7 01       	movw	r30, r14
     5bc:	31 97       	sbiw	r30, 0x01	; 1
	DIO_Write(LCD_RS.PORT_id,LCD_RS.PIN_num, 0);
	Send_Falling_Edge();
	for (pins_L = (unsigned char)0; pins_L < LCD_MODE; pins_L++)
	{
		uint8 PinValue;
		PinValue = (cmd & (1 << pins_L)) >> pins_L;
     5be:	c8 01       	movw	r24, r16
     5c0:	0c 2e       	mov	r0, r28
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <LCD_Send_Cmd+0x9c>
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	0a 94       	dec	r0
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <LCD_Send_Cmd+0x98>
     5cc:	88 21       	and	r24, r8
     5ce:	99 21       	and	r25, r9
     5d0:	9c 01       	movw	r18, r24
     5d2:	0c 2e       	mov	r0, r28
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <LCD_Send_Cmd+0xae>
     5d6:	35 95       	asr	r19
     5d8:	27 95       	ror	r18
     5da:	0a 94       	dec	r0
     5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <LCD_Send_Cmd+0xaa>
     5de:	a9 01       	movw	r20, r18
		
		DIO_Write(DATA_Pins[pins_L].PORT_id, DATA_Pins[pins_L].PIN_num , PinValue);
     5e0:	80 81       	ld	r24, Z
     5e2:	f7 01       	movw	r30, r14
     5e4:	60 81       	ld	r22, Z
     5e6:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
     5ea:	21 96       	adiw	r28, 0x01	; 1
     5ec:	22 e0       	ldi	r18, 0x02	; 2
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	e2 0e       	add	r14, r18
     5f2:	f3 1e       	adc	r15, r19
	}
	
	
	DIO_Write(LCD_RS.PORT_id,LCD_RS.PIN_num, 0);
	Send_Falling_Edge();
	for (pins_L = (unsigned char)0; pins_L < LCD_MODE; pins_L++)
     5f4:	c4 30       	cpi	r28, 0x04	; 4
     5f6:	d1 05       	cpc	r29, r1
     5f8:	01 f7       	brne	.-64     	; 0x5ba <LCD_Send_Cmd+0x8e>
		
		DIO_Write(DATA_Pins[pins_L].PORT_id, DATA_Pins[pins_L].PIN_num , PinValue);
	}
	
	
	DIO_Write(LCD_RS.PORT_id,LCD_RS.PIN_num,0);
     5fa:	8c 2d       	mov	r24, r12
     5fc:	6a 2d       	mov	r22, r10
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
	Send_Falling_Edge();
     604:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Send_Falling_Edge>
     608:	89 ef       	ldi	r24, 0xF9	; 249
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <LCD_Send_Cmd+0xe0>
     610:	00 c0       	rjmp	.+0      	; 0x612 <LCD_Send_Cmd+0xe6>
     612:	00 00       	nop
	_delay_ms(1);

}
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	bf 90       	pop	r11
     626:	af 90       	pop	r10
     628:	9f 90       	pop	r9
     62a:	8f 90       	pop	r8
     62c:	08 95       	ret

0000062e <LCD_Init>:
#define F_CPU 1000000ul
#include <util/delay.h>


void LCD_Init(void)
{
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	85 e4       	ldi	r24, 0x45	; 69
     638:	9e e1       	ldi	r25, 0x1E	; 30
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <LCD_Init+0xc>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <LCD_Init+0x12>
     640:	00 00       	nop
     642:	c4 eb       	ldi	r28, 0xB4	; 180
     644:	d0 e0       	ldi	r29, 0x00	; 0
#include "TYPE_DEFs.h"
#define F_CPU 1000000ul
#include <util/delay.h>


void LCD_Init(void)
     646:	8e 01       	movw	r16, r28
     648:	08 5f       	subi	r16, 0xF8	; 248
     64a:	1f 4f       	sbci	r17, 0xFF	; 255
     64c:	fe 01       	movw	r30, r28
     64e:	31 97       	sbiw	r30, 0x01	; 1
	_delay_ms(31);
	
	uint8 Loop;
	for(Loop=(unsigned char)0 ; Loop < LCD_MODE ; Loop++)
	{
		DIO_SetPINDir(DATA_Pins[Loop].PORT_id,DATA_Pins[Loop].PIN_num, 1);
     650:	80 81       	ld	r24, Z
     652:	68 81       	ld	r22, Y
     654:	41 e0       	ldi	r20, 0x01	; 1
     656:	0e 94 16 04 	call	0x82c	; 0x82c <DIO_SetPINDir>
     65a:	22 96       	adiw	r28, 0x02	; 2
void LCD_Init(void)
{
	_delay_ms(31);
	
	uint8 Loop;
	for(Loop=(unsigned char)0 ; Loop < LCD_MODE ; Loop++)
     65c:	c0 17       	cp	r28, r16
     65e:	d1 07       	cpc	r29, r17
     660:	a9 f7       	brne	.-22     	; 0x64c <LCD_Init+0x1e>
	{
		DIO_SetPINDir(DATA_Pins[Loop].PORT_id,DATA_Pins[Loop].PIN_num, 1);
	}
	
	DIO_SetPINDir(LCD_RS.PORT_id, LCD_RS.PIN_num, 1);
     662:	80 91 bf 00 	lds	r24, 0x00BF
     666:	60 91 c0 00 	lds	r22, 0x00C0
     66a:	41 e0       	ldi	r20, 0x01	; 1
     66c:	0e 94 16 04 	call	0x82c	; 0x82c <DIO_SetPINDir>
	DIO_SetPINDir(LCD_RW.PORT_id,LCD_RW.PIN_num, 1);
     670:	00 91 bd 00 	lds	r16, 0x00BD
     674:	c0 91 be 00 	lds	r28, 0x00BE
     678:	80 2f       	mov	r24, r16
     67a:	6c 2f       	mov	r22, r28
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	0e 94 16 04 	call	0x82c	; 0x82c <DIO_SetPINDir>
	DIO_SetPINDir(LCD_E.PORT_id,LCD_E.PIN_num, 1);
     682:	80 91 bb 00 	lds	r24, 0x00BB
     686:	60 91 bc 00 	lds	r22, 0x00BC
     68a:	41 e0       	ldi	r20, 0x01	; 1
     68c:	0e 94 16 04 	call	0x82c	; 0x82c <DIO_SetPINDir>
	
	DIO_Write(LCD_RW.PORT_id, LCD_RW.PIN_num ,0);
     690:	80 2f       	mov	r24, r16
     692:	6c 2f       	mov	r22, r28
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
	LCD_Send_Cmd(RETURN_HOME); //return home
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_Send_Cmd>
	//_delay_ms(10);
	LCD_Send_Cmd(FOUR_BITS); //4bit mode
     6a0:	88 e2       	ldi	r24, 0x28	; 40
     6a2:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_Send_Cmd>
	//_delay_ms(1);
	LCD_Send_Cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
     6a6:	8e e0       	ldi	r24, 0x0E	; 14
     6a8:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_Send_Cmd>
	//_delay_ms(1);
	LCD_Send_Cmd(CLR_SCREEN);//clear the screen
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_Send_Cmd>
     6b2:	8d ee       	ldi	r24, 0xED	; 237
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCD_Init+0x88>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <LCD_Init+0x8e>
     6bc:	00 00       	nop
	_delay_ms(3);
	LCD_Send_Cmd(ENTRY_MODE); //entry mode
     6be:	86 e0       	ldi	r24, 0x06	; 6
     6c0:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_Send_Cmd>
	//_delay_ms(1);
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	08 95       	ret

000006ce <LCD_Send_Char>:

}


void LCD_Send_Char(uint8 data)
{
     6ce:	8f 92       	push	r8
     6d0:	9f 92       	push	r9
     6d2:	af 92       	push	r10
     6d4:	bf 92       	push	r11
     6d6:	cf 92       	push	r12
     6d8:	df 92       	push	r13
     6da:	ef 92       	push	r14
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
		DIO_Write(DATA_Pins[pins_M].PORT_id, DATA_Pins[pins_M].PIN_num , PinValue);
	}
	
	
	DIO_Write(LCD_RS.PORT_id,LCD_RS.PIN_num, 1);
	Send_Falling_Edge();
     6e6:	0f 2e       	mov	r0, r31
     6e8:	f4 eb       	ldi	r31, 0xB4	; 180
     6ea:	ef 2e       	mov	r14, r31
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	ff 2e       	mov	r15, r31
     6f0:	f0 2d       	mov	r31, r0

}


void LCD_Send_Char(uint8 data)
{
     6f2:	e7 01       	movw	r28, r14
     6f4:	04 e0       	ldi	r16, 0x04	; 4
     6f6:	10 e0       	ldi	r17, 0x00	; 0
	uint8 pins_M;
	uint8 pins_L;
	for (pins_M = (unsigned char)0; pins_M < LCD_MODE; pins_M++)
	{
		uint8 PinValue;
		PinValue = (data & (1 << (pins_M + 4))) >> (pins_M + 4);
     6f8:	c8 2e       	mov	r12, r24
     6fa:	dd 24       	eor	r13, r13
     6fc:	aa 24       	eor	r10, r10
     6fe:	bb 24       	eor	r11, r11
     700:	a3 94       	inc	r10
     702:	46 01       	movw	r8, r12
	_delay_ms(1);

}


void LCD_Send_Char(uint8 data)
     704:	fe 01       	movw	r30, r28
     706:	31 97       	sbiw	r30, 0x01	; 1
	uint8 pins_M;
	uint8 pins_L;
	for (pins_M = (unsigned char)0; pins_M < LCD_MODE; pins_M++)
	{
		uint8 PinValue;
		PinValue = (data & (1 << (pins_M + 4))) >> (pins_M + 4);
     708:	c5 01       	movw	r24, r10
     70a:	00 2e       	mov	r0, r16
     70c:	02 c0       	rjmp	.+4      	; 0x712 <LCD_Send_Char+0x44>
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	0a 94       	dec	r0
     714:	e2 f7       	brpl	.-8      	; 0x70e <LCD_Send_Char+0x40>
     716:	8c 21       	and	r24, r12
     718:	9d 21       	and	r25, r13
     71a:	9c 01       	movw	r18, r24
     71c:	00 2e       	mov	r0, r16
     71e:	02 c0       	rjmp	.+4      	; 0x724 <LCD_Send_Char+0x56>
     720:	35 95       	asr	r19
     722:	27 95       	ror	r18
     724:	0a 94       	dec	r0
     726:	e2 f7       	brpl	.-8      	; 0x720 <LCD_Send_Char+0x52>
     728:	a9 01       	movw	r20, r18
		
		DIO_Write(DATA_Pins[pins_M].PORT_id, DATA_Pins[pins_M].PIN_num , PinValue);
     72a:	80 81       	ld	r24, Z
     72c:	68 81       	ld	r22, Y
     72e:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
     732:	0f 5f       	subi	r16, 0xFF	; 255
     734:	1f 4f       	sbci	r17, 0xFF	; 255
     736:	22 96       	adiw	r28, 0x02	; 2
{
	
	
	uint8 pins_M;
	uint8 pins_L;
	for (pins_M = (unsigned char)0; pins_M < LCD_MODE; pins_M++)
     738:	08 30       	cpi	r16, 0x08	; 8
     73a:	11 05       	cpc	r17, r1
     73c:	11 f7       	brne	.-60     	; 0x702 <LCD_Send_Char+0x34>
		
		DIO_Write(DATA_Pins[pins_M].PORT_id, DATA_Pins[pins_M].PIN_num , PinValue);
	}
	
	
	DIO_Write(LCD_RS.PORT_id,LCD_RS.PIN_num, 1);
     73e:	c0 90 bf 00 	lds	r12, 0x00BF
     742:	a0 90 c0 00 	lds	r10, 0x00C0
     746:	8c 2d       	mov	r24, r12
     748:	6a 2d       	mov	r22, r10
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
	Send_Falling_Edge();
     750:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Send_Falling_Edge>
     754:	c0 e0       	ldi	r28, 0x00	; 0
     756:	d0 e0       	ldi	r29, 0x00	; 0
	for (pins_L = (unsigned char)0; pins_L < LCD_MODE; pins_L++)
	{
		uint8 PinValue;
		PinValue = (data & (1 << pins_L)) >> pins_L;
     758:	01 e0       	ldi	r16, 0x01	; 1
     75a:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(1);

}


void LCD_Send_Char(uint8 data)
     75c:	f7 01       	movw	r30, r14
     75e:	31 97       	sbiw	r30, 0x01	; 1
	DIO_Write(LCD_RS.PORT_id,LCD_RS.PIN_num, 1);
	Send_Falling_Edge();
	for (pins_L = (unsigned char)0; pins_L < LCD_MODE; pins_L++)
	{
		uint8 PinValue;
		PinValue = (data & (1 << pins_L)) >> pins_L;
     760:	c8 01       	movw	r24, r16
     762:	0c 2e       	mov	r0, r28
     764:	02 c0       	rjmp	.+4      	; 0x76a <LCD_Send_Char+0x9c>
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	0a 94       	dec	r0
     76c:	e2 f7       	brpl	.-8      	; 0x766 <LCD_Send_Char+0x98>
     76e:	88 21       	and	r24, r8
     770:	99 21       	and	r25, r9
     772:	9c 01       	movw	r18, r24
     774:	0c 2e       	mov	r0, r28
     776:	02 c0       	rjmp	.+4      	; 0x77c <LCD_Send_Char+0xae>
     778:	35 95       	asr	r19
     77a:	27 95       	ror	r18
     77c:	0a 94       	dec	r0
     77e:	e2 f7       	brpl	.-8      	; 0x778 <LCD_Send_Char+0xaa>
     780:	a9 01       	movw	r20, r18
		
		DIO_Write(DATA_Pins[pins_L].PORT_id, DATA_Pins[pins_L].PIN_num , PinValue);
     782:	80 81       	ld	r24, Z
     784:	f7 01       	movw	r30, r14
     786:	60 81       	ld	r22, Z
     788:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
     78c:	21 96       	adiw	r28, 0x01	; 1
     78e:	22 e0       	ldi	r18, 0x02	; 2
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	e2 0e       	add	r14, r18
     794:	f3 1e       	adc	r15, r19
	}
	
	
	DIO_Write(LCD_RS.PORT_id,LCD_RS.PIN_num, 1);
	Send_Falling_Edge();
	for (pins_L = (unsigned char)0; pins_L < LCD_MODE; pins_L++)
     796:	c4 30       	cpi	r28, 0x04	; 4
     798:	d1 05       	cpc	r29, r1
     79a:	01 f7       	brne	.-64     	; 0x75c <LCD_Send_Char+0x8e>
		
		DIO_Write(DATA_Pins[pins_L].PORT_id, DATA_Pins[pins_L].PIN_num , PinValue);
	}
	
	
	DIO_Write(LCD_RS.PORT_id,LCD_RS.PIN_num,1);
     79c:	8c 2d       	mov	r24, r12
     79e:	6a 2d       	mov	r22, r10
     7a0:	41 e0       	ldi	r20, 0x01	; 1
     7a2:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
	Send_Falling_Edge();
     7a6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Send_Falling_Edge>
     7aa:	89 ef       	ldi	r24, 0xF9	; 249
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <LCD_Send_Char+0xe0>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <LCD_Send_Char+0xe6>
     7b4:	00 00       	nop
	_delay_ms(1);

	
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	bf 90       	pop	r11
     7c8:	af 90       	pop	r10
     7ca:	9f 90       	pop	r9
     7cc:	8f 90       	pop	r8
     7ce:	08 95       	ret

000007d0 <LCD_Send_String>:

void LCD_Send_String(uint8 *data)
{
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     7d6:	88 81       	ld	r24, Y
     7d8:	88 23       	and	r24, r24
     7da:	31 f0       	breq	.+12     	; 0x7e8 <LCD_Send_String+0x18>
	_delay_ms(1);

	
}

void LCD_Send_String(uint8 *data)
     7dc:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_Send_Char(*data);
     7de:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_Send_Char>
	
}

void LCD_Send_String(uint8 *data)
{
	while((*data)!='\0')
     7e2:	89 91       	ld	r24, Y+
     7e4:	88 23       	and	r24, r24
     7e6:	d9 f7       	brne	.-10     	; 0x7de <LCD_Send_String+0xe>
	{
		LCD_Send_Char(*data);
		data++;
	}
}
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <LCD_ClearScreen>:


void LCD_ClearScreen(void)
{
	LCD_Send_Cmd(CLR_SCREEN);
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_Send_Cmd>
	//_delay_ms(3);
}
     7f4:	08 95       	ret

000007f6 <LCD_Move_Cursor>:


void LCD_Move_Cursor(uint8 row,uint8 coloumn)
{
	uint8 data ;
	if(row>1||row<0||coloumn>15||coloumn<0)
     7f6:	82 30       	cpi	r24, 0x02	; 2
     7f8:	60 f4       	brcc	.+24     	; 0x812 <LCD_Move_Cursor+0x1c>
     7fa:	60 31       	cpi	r22, 0x10	; 16
     7fc:	60 f4       	brcc	.+24     	; 0x816 <LCD_Move_Cursor+0x20>
	{
		data=0x80;
	}
	else if(row==0)
     7fe:	88 23       	and	r24, r24
     800:	19 f4       	brne	.+6      	; 0x808 <LCD_Move_Cursor+0x12>
	{
		data=0x80+coloumn ;
     802:	96 2f       	mov	r25, r22
     804:	90 58       	subi	r25, 0x80	; 128
     806:	08 c0       	rjmp	.+16     	; 0x818 <LCD_Move_Cursor+0x22>
	}
	else if (row==1)
     808:	81 30       	cpi	r24, 0x01	; 1
     80a:	31 f4       	brne	.+12     	; 0x818 <LCD_Move_Cursor+0x22>
	{
		data=0xc0+coloumn;
     80c:	96 2f       	mov	r25, r22
     80e:	90 54       	subi	r25, 0x40	; 64
     810:	03 c0       	rjmp	.+6      	; 0x818 <LCD_Move_Cursor+0x22>
void LCD_Move_Cursor(uint8 row,uint8 coloumn)
{
	uint8 data ;
	if(row>1||row<0||coloumn>15||coloumn<0)
	{
		data=0x80;
     812:	90 e8       	ldi	r25, 0x80	; 128
     814:	01 c0       	rjmp	.+2      	; 0x818 <LCD_Move_Cursor+0x22>
     816:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==1)
	{
		data=0xc0+coloumn;
	}
	LCD_Send_Cmd(data);
     818:	89 2f       	mov	r24, r25
     81a:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_Send_Cmd>
     81e:	89 ef       	ldi	r24, 0xF9	; 249
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <LCD_Move_Cursor+0x2c>
     826:	00 c0       	rjmp	.+0      	; 0x828 <LCD_Move_Cursor+0x32>
     828:	00 00       	nop
	_delay_ms(1);
}
     82a:	08 95       	ret

0000082c <DIO_SetPINDir>:


void DIO_SetPINDir(uint8 PORT_ID,uint8 pinnumber,uint8 direction)
{
	
		if(direction==1)
     82c:	41 30       	cpi	r20, 0x01	; 1
     82e:	99 f4       	brne	.+38     	; 0x856 <DIO_SetPINDir+0x2a>
		{
			
			SET_BIT(DDR_REG(PORT_ID),pinnumber);//Set the direction of the given pin in port A as output
     830:	e8 2f       	mov	r30, r24
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	e1 55       	subi	r30, 0x51	; 81
     836:	ff 4f       	sbci	r31, 0xFF	; 255
     838:	e0 81       	ld	r30, Z
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	22 91       	ld	r18, -Z
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	ac 01       	movw	r20, r24
     844:	02 c0       	rjmp	.+4      	; 0x84a <DIO_SetPINDir+0x1e>
     846:	44 0f       	add	r20, r20
     848:	55 1f       	adc	r21, r21
     84a:	6a 95       	dec	r22
     84c:	e2 f7       	brpl	.-8      	; 0x846 <DIO_SetPINDir+0x1a>
     84e:	ba 01       	movw	r22, r20
     850:	62 2b       	or	r22, r18
     852:	60 83       	st	Z, r22
     854:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDR_REG(PORT_ID),pinnumber);//Set the direction of the given pin in port A as input
     856:	e8 2f       	mov	r30, r24
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	e1 55       	subi	r30, 0x51	; 81
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	e0 81       	ld	r30, Z
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	22 91       	ld	r18, -Z
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	ac 01       	movw	r20, r24
     86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
     86c:	44 0f       	add	r20, r20
     86e:	55 1f       	adc	r21, r21
     870:	6a 95       	dec	r22
     872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
     874:	ba 01       	movw	r22, r20
     876:	60 95       	com	r22
     878:	62 23       	and	r22, r18
     87a:	60 83       	st	Z, r22
     87c:	08 95       	ret

0000087e <DIO_Write>:

void DIO_Write(unsigned char PORT_ID,unsigned char pinnumber,unsigned char outputvalue)
{
	
	
		if(outputvalue==1)
     87e:	41 30       	cpi	r20, 0x01	; 1
     880:	99 f4       	brne	.+38     	; 0x8a8 <DIO_Write+0x2a>
		{
			
			SET_BIT(PORT_REG(PORT_ID),pinnumber);//Set the direction of the given pin in port A as output
     882:	e8 2f       	mov	r30, r24
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	e1 55       	subi	r30, 0x51	; 81
     888:	ff 4f       	sbci	r31, 0xFF	; 255
     88a:	e0 81       	ld	r30, Z
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	20 81       	ld	r18, Z
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	ac 01       	movw	r20, r24
     896:	02 c0       	rjmp	.+4      	; 0x89c <DIO_Write+0x1e>
     898:	44 0f       	add	r20, r20
     89a:	55 1f       	adc	r21, r21
     89c:	6a 95       	dec	r22
     89e:	e2 f7       	brpl	.-8      	; 0x898 <DIO_Write+0x1a>
     8a0:	ba 01       	movw	r22, r20
     8a2:	62 2b       	or	r22, r18
     8a4:	60 83       	st	Z, r22
     8a6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORT_REG(PORT_ID),pinnumber);//Set the direction of the given pin in port A as input
     8a8:	e8 2f       	mov	r30, r24
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	e1 55       	subi	r30, 0x51	; 81
     8ae:	ff 4f       	sbci	r31, 0xFF	; 255
     8b0:	e0 81       	ld	r30, Z
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	20 81       	ld	r18, Z
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	ac 01       	movw	r20, r24
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <DIO_Write+0x44>
     8be:	44 0f       	add	r20, r20
     8c0:	55 1f       	adc	r21, r21
     8c2:	6a 95       	dec	r22
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <DIO_Write+0x40>
     8c6:	ba 01       	movw	r22, r20
     8c8:	60 95       	com	r22
     8ca:	62 23       	and	r22, r18
     8cc:	60 83       	st	Z, r22
     8ce:	08 95       	ret

000008d0 <DIO_Read_PIN>:


uint8 DIO_Read_PIN(uint8 PORT_ID,uint8 pinnumber, uint8*return_value)
{
	
		*return_value=READ_BIT(PIN_REG(PORT_ID),pinnumber);
     8d0:	e8 2f       	mov	r30, r24
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	e1 55       	subi	r30, 0x51	; 81
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	e0 81       	ld	r30, Z
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	32 97       	sbiw	r30, 0x02	; 2
     8de:	20 81       	ld	r18, Z
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	06 2e       	mov	r0, r22
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <DIO_Read_PIN+0x1e>
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	0a 94       	dec	r0
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <DIO_Read_PIN+0x1a>
     8f2:	82 23       	and	r24, r18
     8f4:	93 23       	and	r25, r19
     8f6:	9c 01       	movw	r18, r24
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <DIO_Read_PIN+0x2e>
     8fa:	35 95       	asr	r19
     8fc:	27 95       	ror	r18
     8fe:	6a 95       	dec	r22
     900:	e2 f7       	brpl	.-8      	; 0x8fa <DIO_Read_PIN+0x2a>
     902:	fa 01       	movw	r30, r20
     904:	20 83       	st	Z, r18
}		
     906:	08 95       	ret

00000908 <DIO_Connect_Pull_Up>:



void DIO_Connect_Pull_Up(unsigned char PORT_ID,unsigned char pinnumber,unsigned char connect_pullup)
{
	if(connect_pullup==1)
     908:	41 30       	cpi	r20, 0x01	; 1
     90a:	99 f4       	brne	.+38     	; 0x932 <DIO_Connect_Pull_Up+0x2a>
	{
		SET_BIT(PORT_REG(PORT_ID),pinnumber);
     90c:	e8 2f       	mov	r30, r24
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	e1 55       	subi	r30, 0x51	; 81
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	e0 81       	ld	r30, Z
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	20 81       	ld	r18, Z
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	ac 01       	movw	r20, r24
     920:	02 c0       	rjmp	.+4      	; 0x926 <DIO_Connect_Pull_Up+0x1e>
     922:	44 0f       	add	r20, r20
     924:	55 1f       	adc	r21, r21
     926:	6a 95       	dec	r22
     928:	e2 f7       	brpl	.-8      	; 0x922 <DIO_Connect_Pull_Up+0x1a>
     92a:	ba 01       	movw	r22, r20
     92c:	62 2b       	or	r22, r18
     92e:	60 83       	st	Z, r22
     930:	08 95       	ret
	}
	else
	{
		CLR_BIT(PORT_REG(PORT_ID),pinnumber);
     932:	e8 2f       	mov	r30, r24
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	e1 55       	subi	r30, 0x51	; 81
     938:	ff 4f       	sbci	r31, 0xFF	; 255
     93a:	e0 81       	ld	r30, Z
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	20 81       	ld	r18, Z
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	ac 01       	movw	r20, r24
     946:	02 c0       	rjmp	.+4      	; 0x94c <DIO_Connect_Pull_Up+0x44>
     948:	44 0f       	add	r20, r20
     94a:	55 1f       	adc	r21, r21
     94c:	6a 95       	dec	r22
     94e:	e2 f7       	brpl	.-8      	; 0x948 <DIO_Connect_Pull_Up+0x40>
     950:	ba 01       	movw	r22, r20
     952:	60 95       	com	r22
     954:	62 23       	and	r22, r18
     956:	60 83       	st	Z, r22
     958:	08 95       	ret

0000095a <main>:
#define ERROR "ERROR    "

volatile long int counter1=0;
volatile uint8 counter2=0;
void main(void)
{
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	2a 97       	sbiw	r28, 0x0a	; 10
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	de bf       	out	0x3e, r29	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	cd bf       	out	0x3d, r28	; 61
	volatile uint8 bit_M= 2;
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8 bit_L= 5;
     972:	85 e0       	ldi	r24, 0x05	; 5
     974:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8 Butt_pressed = 'N';
     976:	8e e4       	ldi	r24, 0x4E	; 78
     978:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8 data_flag = 0;
     97a:	1c 82       	std	Y+4, r1	; 0x04
	volatile uint8 from_stand_to_oper_flag = 0;
     97c:	1d 82       	std	Y+5, r1	; 0x05
	volatile uint8 Set_temp=25;
     97e:	89 e1       	ldi	r24, 0x19	; 25
     980:	8e 83       	std	Y+6, r24	; 0x06
	volatile uint8 current_temp=0;
     982:	1f 82       	std	Y+7, r1	; 0x07
	volatile uint8 system_state = STANDBY;
     984:	81 ec       	ldi	r24, 0xC1	; 193
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	58 2e       	mov	r5, r24
     98a:	88 87       	std	Y+8, r24	; 0x08
	LCD_Init();
     98c:	0e 94 17 03 	call	0x62e	; 0x62e <LCD_Init>
	tc72Init();
     990:	0e 94 52 06 	call	0xca4	; 0xca4 <tc72Init>
	Key_Pad_init();
     994:	0e 94 a3 01 	call	0x346	; 0x346 <Key_Pad_init>
	ADC_Init();
     998:	0e 94 4d 00 	call	0x9a	; 0x9a <ADC_Init>
	Welcom_Screen();
     99c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Welcom_Screen>
	IDLE_Screen();
     9a0:	0e 94 37 01 	call	0x26e	; 0x26e <IDLE_Screen>
	
		
    while(1)
    {
		Keypad_CheckPress(&Butt_pressed);
		if (system_state == STANDBY)
     9a4:	0f 2e       	mov	r0, r31
     9a6:	f1 ec       	ldi	r31, 0xC1	; 193
     9a8:	8f 2e       	mov	r8, r31
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	9f 2e       	mov	r9, r31
     9ae:	f0 2d       	mov	r31, r0
				}
				else{
					
					bit_M = bit_L;
					bit_L = Butt_pressed;
					Butt_pressed ='N';
     9b0:	0e e4       	ldi	r16, 0x4E	; 78
					bit_M = 0;
					bit_L = Butt_pressed;
					Butt_pressed ='N';
					Display_M_L_bit(bit_M, bit_L, 4);
					
					data_flag=1;
     9b2:	77 24       	eor	r7, r7
     9b4:	73 94       	inc	r7
				}
				Set_temp = (bit_M*10) + bit_L;
				}
				
		}
		if (system_state == OPERATIONAL || system_state== NORMAL)
     9b6:	0f 2e       	mov	r0, r31
     9b8:	fb ec       	ldi	r31, 0xCB	; 203
     9ba:	ef 2e       	mov	r14, r31
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	ff 2e       	mov	r15, r31
     9c0:	f0 2d       	mov	r31, r0
				
				Timer_2_CTC_Init_Interrupt();
				
				if(counter1>130000)      
				{
					system_state= ERROR;
     9c2:	0f 2e       	mov	r0, r31
     9c4:	ff ed       	ldi	r31, 0xDF	; 223
     9c6:	cf 2e       	mov	r12, r31
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	df 2e       	mov	r13, r31
     9cc:	f0 2d       	mov	r31, r0
			Keypad_CheckPress(&Butt_pressed);
			Timer_2_CTC_Init_Interrupt();
			
			if (normal_cond <= 5)
			{
				system_state = NORMAL;
     9ce:	0f 2e       	mov	r0, r31
     9d0:	f5 ed       	ldi	r31, 0xD5	; 213
     9d2:	af 2e       	mov	r10, r31
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	bf 2e       	mov	r11, r31
     9d8:	f0 2d       	mov	r31, r0
	
	
		
    while(1)
    {
		Keypad_CheckPress(&Butt_pressed);
     9da:	ce 01       	movw	r24, r28
     9dc:	03 96       	adiw	r24, 0x03	; 3
     9de:	0e 94 ed 01 	call	0x3da	; 0x3da <Keypad_CheckPress>
		if (system_state == STANDBY)
     9e2:	88 85       	ldd	r24, Y+8	; 0x08
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	88 15       	cp	r24, r8
     9e8:	99 05       	cpc	r25, r9
     9ea:	d9 f5       	brne	.+118    	; 0xa62 <main+0x108>
		{
			
			timer_pwm(0);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <timer_pwm>

			if ((Butt_pressed != '#') && (Butt_pressed != '*') && (Butt_pressed != 'N'))
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	83 32       	cpi	r24, 0x23	; 35
     9f8:	a1 f1       	breq	.+104    	; 0xa62 <main+0x108>
     9fa:	8b 81       	ldd	r24, Y+3	; 0x03
     9fc:	8a 32       	cpi	r24, 0x2A	; 42
     9fe:	89 f1       	breq	.+98     	; 0xa62 <main+0x108>
     a00:	8b 81       	ldd	r24, Y+3	; 0x03
     a02:	8e 34       	cpi	r24, 0x4E	; 78
     a04:	71 f1       	breq	.+92     	; 0xa62 <main+0x108>
			{
				if(data_flag==0)
     a06:	8c 81       	ldd	r24, Y+4	; 0x04
     a08:	88 23       	and	r24, r24
     a0a:	89 f4       	brne	.+34     	; 0xa2e <main+0xd4>
				{
					
					bit_M = 0;
     a0c:	19 82       	std	Y+1, r1	; 0x01
					bit_L = Butt_pressed;
     a0e:	8b 81       	ldd	r24, Y+3	; 0x03
     a10:	8a 83       	std	Y+2, r24	; 0x02
					Butt_pressed ='N';
     a12:	0b 83       	std	Y+3, r16	; 0x03
					Display_M_L_bit(bit_M, bit_L, 4);
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	6a 81       	ldd	r22, Y+2	; 0x02
     a18:	44 e0       	ldi	r20, 0x04	; 4
     a1a:	0e 94 55 01 	call	0x2aa	; 0x2aa <Display_M_L_bit>
					
					data_flag=1;
     a1e:	7c 82       	std	Y+4, r7	; 0x04
     a20:	83 e2       	ldi	r24, 0x23	; 35
     a22:	94 ef       	ldi	r25, 0xF4	; 244
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <main+0xca>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <main+0xd0>
     a2a:	00 00       	nop
     a2c:	11 c0       	rjmp	.+34     	; 0xa50 <main+0xf6>

					_delay_ms(250);
				}
				else{
					
					bit_M = bit_L;
     a2e:	8a 81       	ldd	r24, Y+2	; 0x02
     a30:	89 83       	std	Y+1, r24	; 0x01
					bit_L = Butt_pressed;
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	8a 83       	std	Y+2, r24	; 0x02
					Butt_pressed ='N';
     a36:	0b 83       	std	Y+3, r16	; 0x03
					Display_M_L_bit(bit_M, bit_L, 4);
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	6a 81       	ldd	r22, Y+2	; 0x02
     a3c:	44 e0       	ldi	r20, 0x04	; 4
     a3e:	0e 94 55 01 	call	0x2aa	; 0x2aa <Display_M_L_bit>
					
					data_flag=0;
     a42:	1c 82       	std	Y+4, r1	; 0x04
     a44:	83 e2       	ldi	r24, 0x23	; 35
     a46:	94 ef       	ldi	r25, 0xF4	; 244
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <main+0xee>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <main+0xf4>
     a4e:	00 00       	nop
					_delay_ms(250);
					
				}
				Set_temp = (bit_M*10) + bit_L;
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	88 0f       	add	r24, r24
     a56:	28 2f       	mov	r18, r24
     a58:	22 0f       	add	r18, r18
     a5a:	22 0f       	add	r18, r18
     a5c:	82 0f       	add	r24, r18
     a5e:	89 0f       	add	r24, r25
     a60:	8e 83       	std	Y+6, r24	; 0x06
				}
				
		}
		if (system_state == OPERATIONAL || system_state== NORMAL)
     a62:	88 85       	ldd	r24, Y+8	; 0x08
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	8e 15       	cp	r24, r14
     a68:	9f 05       	cpc	r25, r15
     a6a:	31 f0       	breq	.+12     	; 0xa78 <main+0x11e>
     a6c:	88 85       	ldd	r24, Y+8	; 0x08
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	8a 15       	cp	r24, r10
     a72:	9b 05       	cpc	r25, r11
     a74:	09 f0       	breq	.+2      	; 0xa78 <main+0x11e>
     a76:	72 c0       	rjmp	.+228    	; 0xb5c <main+0x202>
		{
			char_t D_M;
			char_t D_L;
			get_Temperature(&D_M ,&D_L);
     a78:	ce 01       	movw	r24, r28
     a7a:	0a 96       	adiw	r24, 0x0a	; 10
     a7c:	be 01       	movw	r22, r28
     a7e:	67 5f       	subi	r22, 0xF7	; 247
     a80:	7f 4f       	sbci	r23, 0xFF	; 255
     a82:	0e 94 82 06 	call	0xd04	; 0xd04 <get_Temperature>
			Display_M_L_bit( D_M,D_L,14);
     a86:	8a 85       	ldd	r24, Y+10	; 0x0a
     a88:	69 85       	ldd	r22, Y+9	; 0x09
     a8a:	4e e0       	ldi	r20, 0x0E	; 14
     a8c:	0e 94 55 01 	call	0x2aa	; 0x2aa <Display_M_L_bit>
			
			current_temp = (D_M * 10) + D_L;
     a90:	8a 85       	ldd	r24, Y+10	; 0x0a
     a92:	88 0f       	add	r24, r24
     a94:	98 2f       	mov	r25, r24
     a96:	99 0f       	add	r25, r25
     a98:	99 0f       	add	r25, r25
     a9a:	89 0f       	add	r24, r25
     a9c:	99 85       	ldd	r25, Y+9	; 0x09
     a9e:	89 0f       	add	r24, r25
     aa0:	8f 83       	std	Y+7, r24	; 0x07
			uint8 normal_cond = abs(Set_temp - current_temp);
     aa2:	1e 81       	ldd	r17, Y+6	; 0x06
     aa4:	6f 80       	ldd	r6, Y+7	; 0x07
			Keypad_CheckPress(&Butt_pressed);
     aa6:	ce 01       	movw	r24, r28
     aa8:	03 96       	adiw	r24, 0x03	; 3
     aaa:	0e 94 ed 01 	call	0x3da	; 0x3da <Keypad_CheckPress>
			Timer_2_CTC_Init_Interrupt();
     aae:	0e 94 ce 00 	call	0x19c	; 0x19c <Timer_2_CTC_Init_Interrupt>
			char_t D_L;
			get_Temperature(&D_M ,&D_L);
			Display_M_L_bit( D_M,D_L,14);
			
			current_temp = (D_M * 10) + D_L;
			uint8 normal_cond = abs(Set_temp - current_temp);
     ab2:	81 2f       	mov	r24, r17
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	86 19       	sub	r24, r6
     ab8:	91 09       	sbc	r25, r1
     aba:	99 23       	and	r25, r25
     abc:	1c f4       	brge	.+6      	; 0xac4 <main+0x16a>
     abe:	90 95       	com	r25
     ac0:	81 95       	neg	r24
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
			Keypad_CheckPress(&Butt_pressed);
			Timer_2_CTC_Init_Interrupt();
			
			if (normal_cond <= 5)
     ac4:	86 30       	cpi	r24, 0x06	; 6
     ac6:	78 f4       	brcc	.+30     	; 0xae6 <main+0x18c>
			{
				system_state = NORMAL;
     ac8:	a8 86       	std	Y+8, r10	; 0x08
				timer_pwm(0);
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <timer_pwm>
				Display_sys_State(system_state);
     ad2:	88 85       	ldd	r24, Y+8	; 0x08
     ad4:	0e 94 97 01 	call	0x32e	; 0x32e <Display_sys_State>
     ad8:	8f e4       	ldi	r24, 0x4F	; 79
     ada:	93 ec       	ldi	r25, 0xC3	; 195
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <main+0x182>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <main+0x188>
     ae2:	00 00       	nop
     ae4:	3b c0       	rjmp	.+118    	; 0xb5c <main+0x202>
				_delay_ms(200);
				
				
			}
			else if((current_temp-Set_temp )> 10)
     ae6:	8f 81       	ldd	r24, Y+7	; 0x07
     ae8:	2e 81       	ldd	r18, Y+6	; 0x06
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	82 1b       	sub	r24, r18
     aee:	91 09       	sbc	r25, r1
     af0:	8b 30       	cpi	r24, 0x0B	; 11
     af2:	91 05       	cpc	r25, r1
     af4:	14 f0       	brlt	.+4      	; 0xafa <main+0x1a0>
			{
				system_state = ERROR;
     af6:	c8 86       	std	Y+8, r12	; 0x08
     af8:	31 c0       	rjmp	.+98     	; 0xb5c <main+0x202>
			}
			else if((Set_temp - current_temp)> 5 )
     afa:	8e 81       	ldd	r24, Y+6	; 0x06
     afc:	2f 81       	ldd	r18, Y+7	; 0x07
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	82 1b       	sub	r24, r18
     b02:	91 09       	sbc	r25, r1
     b04:	86 30       	cpi	r24, 0x06	; 6
     b06:	91 05       	cpc	r25, r1
     b08:	4c f1       	brlt	.+82     	; 0xb5c <main+0x202>
			{
				system_state = OPERATIONAL;
     b0a:	e8 86       	std	Y+8, r14	; 0x08
				pwm(Set_temp ,current_temp);
     b0c:	8e 81       	ldd	r24, Y+6	; 0x06
     b0e:	6f 81       	ldd	r22, Y+7	; 0x07
     b10:	0e 94 a3 00 	call	0x146	; 0x146 <pwm>
				Display_sys_State(system_state);
     b14:	88 85       	ldd	r24, Y+8	; 0x08
     b16:	0e 94 97 01 	call	0x32e	; 0x32e <Display_sys_State>
				
				Timer_2_CTC_Init_Interrupt();
     b1a:	0e 94 ce 00 	call	0x19c	; 0x19c <Timer_2_CTC_Init_Interrupt>
				
				if(counter1>130000)      
     b1e:	80 91 03 01 	lds	r24, 0x0103
     b22:	90 91 04 01 	lds	r25, 0x0104
     b26:	a0 91 05 01 	lds	r26, 0x0105
     b2a:	b0 91 06 01 	lds	r27, 0x0106
     b2e:	81 3d       	cpi	r24, 0xD1	; 209
     b30:	2b ef       	ldi	r18, 0xFB	; 251
     b32:	92 07       	cpc	r25, r18
     b34:	21 e0       	ldi	r18, 0x01	; 1
     b36:	a2 07       	cpc	r26, r18
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	b2 07       	cpc	r27, r18
     b3c:	7c f0       	brlt	.+30     	; 0xb5c <main+0x202>
				{
					system_state= ERROR;
     b3e:	c8 86       	std	Y+8, r12	; 0x08
					counter1=0;
     b40:	10 92 03 01 	sts	0x0103, r1
     b44:	10 92 04 01 	sts	0x0104, r1
     b48:	10 92 05 01 	sts	0x0105, r1
     b4c:	10 92 06 01 	sts	0x0106, r1
					Timer_2_CTC_off();
     b50:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Timer_2_CTC_off>
					timer_pwm(0);
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <timer_pwm>
				
				
			}		
		}
		
		if (system_state == ERROR)	
     b5c:	88 85       	ldd	r24, Y+8	; 0x08
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	8c 15       	cp	r24, r12
     b62:	9d 05       	cpc	r25, r13
     b64:	b1 f4       	brne	.+44     	; 0xb92 <main+0x238>
		{
			Display_sys_State(system_state);
     b66:	88 85       	ldd	r24, Y+8	; 0x08
     b68:	0e 94 97 01 	call	0x32e	; 0x32e <Display_sys_State>
			timer_pwm(0);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <timer_pwm>
			LCD_Move_Cursor(0,14);
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	6e e0       	ldi	r22, 0x0E	; 14
     b78:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LCD_Move_Cursor>
			LCD_Send_String("--");
     b7c:	89 ee       	ldi	r24, 0xE9	; 233
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_Send_String>
     b84:	8f e4       	ldi	r24, 0x4F	; 79
     b86:	93 ec       	ldi	r25, 0xC3	; 195
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <main+0x22e>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <main+0x234>
     b8e:	00 00       	nop
     b90:	ff cf       	rjmp	.-2      	; 0xb90 <main+0x236>
			_delay_ms(200);
			while(1){}
			
		}							
				
		if (Butt_pressed == '#')
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	83 32       	cpi	r24, 0x23	; 35
     b96:	09 f0       	breq	.+2      	; 0xb9a <main+0x240>
     b98:	20 cf       	rjmp	.-448    	; 0x9da <main+0x80>
		{
			
			if (from_stand_to_oper_flag==0)
     b9a:	8d 81       	ldd	r24, Y+5	; 0x05
     b9c:	88 23       	and	r24, r24
     b9e:	69 f4       	brne	.+26     	; 0xbba <main+0x260>
			{
				system_state = OPERATIONAL;
     ba0:	e8 86       	std	Y+8, r14	; 0x08
				from_stand_to_oper_flag=1;
     ba2:	7d 82       	std	Y+5, r7	; 0x05
				Butt_pressed ='N';
     ba4:	0b 83       	std	Y+3, r16	; 0x03
				Display_sys_State(system_state);
     ba6:	88 85       	ldd	r24, Y+8	; 0x08
     ba8:	0e 94 97 01 	call	0x32e	; 0x32e <Display_sys_State>
     bac:	8f e4       	ldi	r24, 0x4F	; 79
     bae:	93 ec       	ldi	r25, 0xC3	; 195
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <main+0x256>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <main+0x25c>
     bb6:	00 00       	nop
     bb8:	10 cf       	rjmp	.-480    	; 0x9da <main+0x80>
				
				
			}
			else
			{
				system_state = STANDBY;
     bba:	58 86       	std	Y+8, r5	; 0x08
				Display_sys_State(system_state);
     bbc:	88 85       	ldd	r24, Y+8	; 0x08
     bbe:	0e 94 97 01 	call	0x32e	; 0x32e <Display_sys_State>
				LCD_Move_Cursor(0,14);
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	6e e0       	ldi	r22, 0x0E	; 14
     bc6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LCD_Move_Cursor>
				LCD_Send_String("--");
     bca:	89 ee       	ldi	r24, 0xE9	; 233
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_Send_String>
     bd2:	8f e4       	ldi	r24, 0x4F	; 79
     bd4:	93 ec       	ldi	r25, 0xC3	; 195
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	f1 f7       	brne	.-4      	; 0xbd6 <main+0x27c>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <main+0x282>
     bdc:	00 00       	nop
				_delay_ms(200);
				from_stand_to_oper_flag=0;
     bde:	1d 82       	std	Y+5, r1	; 0x05
				Butt_pressed ='N';
     be0:	0b 83       	std	Y+3, r16	; 0x03
     be2:	fb ce       	rjmp	.-522    	; 0x9da <main+0x80>

00000be4 <__vector_4>:
}
}

	
ISR(TIMER2_COMP_vect)
{
     be4:	1f 92       	push	r1
     be6:	0f 92       	push	r0
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	0f 92       	push	r0
     bec:	11 24       	eor	r1, r1
     bee:	8f 93       	push	r24
     bf0:	9f 93       	push	r25
     bf2:	af 93       	push	r26
     bf4:	bf 93       	push	r27
	counter1++;
     bf6:	80 91 03 01 	lds	r24, 0x0103
     bfa:	90 91 04 01 	lds	r25, 0x0104
     bfe:	a0 91 05 01 	lds	r26, 0x0105
     c02:	b0 91 06 01 	lds	r27, 0x0106
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	a1 1d       	adc	r26, r1
     c0a:	b1 1d       	adc	r27, r1
     c0c:	80 93 03 01 	sts	0x0103, r24
     c10:	90 93 04 01 	sts	0x0104, r25
     c14:	a0 93 05 01 	sts	0x0105, r26
     c18:	b0 93 06 01 	sts	0x0106, r27
	
}
     c1c:	bf 91       	pop	r27
     c1e:	af 91       	pop	r26
     c20:	9f 91       	pop	r25
     c22:	8f 91       	pop	r24
     c24:	0f 90       	pop	r0
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	0f 90       	pop	r0
     c2a:	1f 90       	pop	r1
     c2c:	18 95       	reti

00000c2e <SPI_MasterInit>:


void SPI_MasterInit(void)
{
	/*Set SS / MOSI / SCK  as output pins for master*/
	 DIO_SetPINDir(SPI_Pins[0].Port_id,SPI_Pins[0].pin_number,SPI_Pins[0].pin_direction);
     c2e:	80 91 ec 00 	lds	r24, 0x00EC
     c32:	60 91 ed 00 	lds	r22, 0x00ED
     c36:	40 91 ee 00 	lds	r20, 0x00EE
     c3a:	0e 94 16 04 	call	0x82c	; 0x82c <DIO_SetPINDir>
	 DIO_SetPINDir(SPI_Pins[1].Port_id,SPI_Pins[1].pin_number,SPI_Pins[1].pin_direction);
     c3e:	80 91 ef 00 	lds	r24, 0x00EF
     c42:	60 91 f0 00 	lds	r22, 0x00F0
     c46:	40 91 f1 00 	lds	r20, 0x00F1
     c4a:	0e 94 16 04 	call	0x82c	; 0x82c <DIO_SetPINDir>
	 DIO_SetPINDir(SPI_Pins[3].Port_id,SPI_Pins[3].pin_number,SPI_Pins[3].pin_direction);
     c4e:	80 91 f5 00 	lds	r24, 0x00F5
     c52:	60 91 f6 00 	lds	r22, 0x00F6
     c56:	40 91 f7 00 	lds	r20, 0x00F7
     c5a:	0e 94 16 04 	call	0x82c	; 0x82c <DIO_SetPINDir>
	
	/*Enable Master mode*/
	SET_BIT(SPCR,MSTR);
     c5e:	6c 9a       	sbi	0x0d, 4	; 13
	
	/*Set clock to fosc/128*/
	SET_BIT(SPCR,SPR0);
     c60:	68 9a       	sbi	0x0d, 0	; 13
	SET_BIT(SPCR,SPR1);
     c62:	69 9a       	sbi	0x0d, 1	; 13
	 
	// sample at falling edge
	mode1;
     c64:	6b 98       	cbi	0x0d, 3	; 13
     c66:	6a 9a       	sbi	0x0d, 2	; 13
	
	/*Enable SPI*/
    SET_BIT(SPCR,SPE);
     c68:	6e 9a       	sbi	0x0d, 6	; 13
	/*set SS to high */
	DIO_Write(1,4,1);
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	64 e0       	ldi	r22, 0x04	; 4
     c6e:	41 e0       	ldi	r20, 0x01	; 1
     c70:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_Write>
	
}
     c74:	08 95       	ret

00000c76 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	/*Enable SPI*/
	SET_BIT(SPCR,SPE);
     c76:	6e 9a       	sbi	0x0d, 6	; 13
	/*Set MISO as output*/
	DIO_SetPINDir(SPI_Pins[2].Port_id,SPI_Pins[2].pin_number,SPI_Pins[2].pin_direction);
     c78:	80 91 f2 00 	lds	r24, 0x00F2
     c7c:	60 91 f3 00 	lds	r22, 0x00F3
     c80:	40 91 f4 00 	lds	r20, 0x00F4
     c84:	0e 94 16 04 	call	0x82c	; 0x82c <DIO_SetPINDir>
}
     c88:	08 95       	ret

00000c8a <SPI_MasterTransmit>:

void SPI_MasterTransmit( char Data)
{
	/*Start the transmission*/
	/*Put data on SPDR*/
	SPDR=Data;
     c8a:	8f b9       	out	0x0f, r24	; 15
	/*Wait until the transmission is finished*/
    while(!(SPSR&(1<<SPIF)));	 
     c8c:	77 9b       	sbis	0x0e, 7	; 14
     c8e:	fe cf       	rjmp	.-4      	; 0xc8c <SPI_MasterTransmit+0x2>
}
     c90:	08 95       	ret

00000c92 <SPI_MasterReceive>:


char SPI_MasterReceive(void){
 /*Wait for the SPI buffer's full*/
 /* Wait for reception complete */ 
 while(!(SPSR&(1<<SPIF)));
     c92:	77 9b       	sbis	0x0e, 7	; 14
     c94:	fe cf       	rjmp	.-4      	; 0xc92 <SPI_MasterReceive>
 /*return SPI Buffer (data register)*/
 return SPDR;
     c96:	8f b1       	in	r24, 0x0f	; 15
}
     c98:	08 95       	ret

00000c9a <SPI_SlaveReceive>:
unsigned char SPI_SlaveReceive(unsigned char Data)
{
	/*Put data on SPDR*/
	SPDR=Data;
     c9a:	8f b9       	out	0x0f, r24	; 15
	/*Wait until data is received in SPI register*/
	while(READ_BIT(SPSR,SPIF)==0);
     c9c:	77 9b       	sbis	0x0e, 7	; 14
     c9e:	fe cf       	rjmp	.-4      	; 0xc9c <SPI_SlaveReceive+0x2>
	/*read the received data*/
	return SPDR ;
     ca0:	8f b1       	in	r24, 0x0f	; 15
}
     ca2:	08 95       	ret

00000ca4 <tc72Init>:
#define F_CPU 1000000UL
#include <util/delay.h>


void tc72Init(void){
	 SPI_MasterInit();
     ca4:	0e 94 17 06 	call	0xc2e	; 0xc2e <SPI_MasterInit>
	/* make CE to TC72 as 1 */
	SET_BIT(PORTB,4);
     ca8:	c4 9a       	sbi	0x18, 4	; 24
	/*Select Control Register*/
	SPI_MasterTransmit(CONTROL_REG_WRITE); /* to make write operation on TC72 sensor */
     caa:	80 e8       	ldi	r24, 0x80	; 128
     cac:	0e 94 45 06 	call	0xc8a	; 0xc8a <SPI_MasterTransmit>
	/*Select Continuous temperature Conversion*/
	SPI_MasterTransmit(CONTINUOUS_TEMPERATURE_CONVERSION);
     cb0:	84 e0       	ldi	r24, 0x04	; 4
     cb2:	0e 94 45 06 	call	0xc8a	; 0xc8a <SPI_MasterTransmit>
	
	/* make CE to TC72 as 0 */
	CLR_BIT(PORTB,4);
     cb6:	c4 98       	cbi	0x18, 4	; 24
     cb8:	8f e4       	ldi	r24, 0x4F	; 79
     cba:	93 ec       	ldi	r25, 0xC3	; 195
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <tc72Init+0x18>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <tc72Init+0x1e>
     cc2:	00 00       	nop
	_delay_ms(200);

}
     cc4:	08 95       	ret

00000cc6 <temp_read_msb>:


char_t temp_read_msb(void){
	char_t msb;
	SET_BIT(PORTB,4);
     cc6:	c4 9a       	sbi	0x18, 4	; 24
	/*Read the MSB*/
	SPI_MasterTransmit(READ_MSB_TEMP );
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	0e 94 45 06 	call	0xc8a	; 0xc8a <SPI_MasterTransmit>
	/*Issue one more clock frame to force data out*/
	SPI_MasterTransmit(CONTROL_REG_READ);
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	0e 94 45 06 	call	0xc8a	; 0xc8a <SPI_MasterTransmit>
	CLR_BIT( PORTB,4);
     cd4:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd6:	81 e2       	ldi	r24, 0x21	; 33
     cd8:	8a 95       	dec	r24
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <temp_read_msb+0x12>
     cdc:	00 00       	nop
	//_delay_ms(1);
	_delay_us(100);
	msb=SPI_MasterReceive();
     cde:	0e 94 49 06 	call	0xc92	; 0xc92 <SPI_MasterReceive>

	SET_BIT(PORTB,4);
     ce2:	c4 9a       	sbi	0x18, 4	; 24
	return msb;
	
	
}
     ce4:	08 95       	ret

00000ce6 <temp_read_lsb>:

char_t temp_read_lsb(void)
{
	/*Read The LSB*/
	char_t lsb;
	SET_BIT(PORTB,4);
     ce6:	c4 9a       	sbi	0x18, 4	; 24
	/*Read The LSB*/
	SPI_MasterTransmit( READ_LSB_TEMP );
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	0e 94 45 06 	call	0xc8a	; 0xc8a <SPI_MasterTransmit>
	/*Issue one more clock frame to force data out*/
	SPI_MasterTransmit(CONTROL_REG_READ);
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	0e 94 45 06 	call	0xc8a	; 0xc8a <SPI_MasterTransmit>
	CLR_BIT( PORTB,4);
     cf4:	c4 98       	cbi	0x18, 4	; 24
     cf6:	81 e2       	ldi	r24, 0x21	; 33
     cf8:	8a 95       	dec	r24
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <temp_read_lsb+0x12>
     cfc:	00 00       	nop
	// _delay_ms(1);
	_delay_us(100);
	lsb=SPI_MasterReceive();
     cfe:	0e 94 49 06 	call	0xc92	; 0xc92 <SPI_MasterReceive>
	return lsb;
	
}
     d02:	08 95       	ret

00000d04 <get_Temperature>:
     d04:	cf 92       	push	r12
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	2a 97       	sbiw	r28, 0x0a	; 10
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	7c 01       	movw	r14, r24
     d24:	6b 01       	movw	r12, r22
     d26:	de 01       	movw	r26, r28
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	e8 ef       	ldi	r30, 0xF8	; 248
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	8a e0       	ldi	r24, 0x0A	; 10
     d30:	01 90       	ld	r0, Z+
     d32:	0d 92       	st	X+, r0
     d34:	81 50       	subi	r24, 0x01	; 1
     d36:	e1 f7       	brne	.-8      	; 0xd30 <get_Temperature+0x2c>
     d38:	0e 94 63 06 	call	0xcc6	; 0xcc6 <temp_read_msb>
     d3c:	18 2f       	mov	r17, r24
     d3e:	0e 94 73 06 	call	0xce6	; 0xce6 <temp_read_lsb>
     d42:	17 fd       	sbrc	r17, 7
     d44:	11 95       	neg	r17
     d46:	1a 30       	cpi	r17, 0x0A	; 10
     d48:	78 f0       	brcs	.+30     	; 0xd68 <get_Temperature+0x64>
     d4a:	81 2f       	mov	r24, r17
     d4c:	64 e6       	ldi	r22, 0x64	; 100
     d4e:	0e 94 b9 08 	call	0x1172	; 0x1172 <__udivmodqi4>
     d52:	89 2f       	mov	r24, r25
     d54:	6a e0       	ldi	r22, 0x0A	; 10
     d56:	0e 94 b9 08 	call	0x1172	; 0x1172 <__udivmodqi4>
     d5a:	fe 01       	movw	r30, r28
     d5c:	e8 0f       	add	r30, r24
     d5e:	f1 1d       	adc	r31, r1
     d60:	81 81       	ldd	r24, Z+1	; 0x01
     d62:	f7 01       	movw	r30, r14
     d64:	80 83       	st	Z, r24
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <get_Temperature+0x6a>
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	f7 01       	movw	r30, r14
     d6c:	80 83       	st	Z, r24
     d6e:	81 2f       	mov	r24, r17
     d70:	6a e0       	ldi	r22, 0x0A	; 10
     d72:	0e 94 b9 08 	call	0x1172	; 0x1172 <__udivmodqi4>
     d76:	fe 01       	movw	r30, r28
     d78:	e9 0f       	add	r30, r25
     d7a:	f1 1d       	adc	r31, r1
     d7c:	81 81       	ldd	r24, Z+1	; 0x01
     d7e:	f6 01       	movw	r30, r12
     d80:	80 83       	st	Z, r24
     d82:	2a 96       	adiw	r28, 0x0a	; 10
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	df 90       	pop	r13
     d9a:	cf 90       	pop	r12
     d9c:	08 95       	ret

00000d9e <__subsf3>:
     d9e:	50 58       	subi	r21, 0x80	; 128

00000da0 <__addsf3>:
     da0:	bb 27       	eor	r27, r27
     da2:	aa 27       	eor	r26, r26
     da4:	0e d0       	rcall	.+28     	; 0xdc2 <__addsf3x>
     da6:	48 c1       	rjmp	.+656    	; 0x1038 <__fp_round>
     da8:	39 d1       	rcall	.+626    	; 0x101c <__fp_pscA>
     daa:	30 f0       	brcs	.+12     	; 0xdb8 <__addsf3+0x18>
     dac:	3e d1       	rcall	.+636    	; 0x102a <__fp_pscB>
     dae:	20 f0       	brcs	.+8      	; 0xdb8 <__addsf3+0x18>
     db0:	31 f4       	brne	.+12     	; 0xdbe <__addsf3+0x1e>
     db2:	9f 3f       	cpi	r25, 0xFF	; 255
     db4:	11 f4       	brne	.+4      	; 0xdba <__addsf3+0x1a>
     db6:	1e f4       	brtc	.+6      	; 0xdbe <__addsf3+0x1e>
     db8:	2e c1       	rjmp	.+604    	; 0x1016 <__fp_nan>
     dba:	0e f4       	brtc	.+2      	; 0xdbe <__addsf3+0x1e>
     dbc:	e0 95       	com	r30
     dbe:	e7 fb       	bst	r30, 7
     dc0:	24 c1       	rjmp	.+584    	; 0x100a <__fp_inf>

00000dc2 <__addsf3x>:
     dc2:	e9 2f       	mov	r30, r25
     dc4:	4a d1       	rcall	.+660    	; 0x105a <__fp_split3>
     dc6:	80 f3       	brcs	.-32     	; 0xda8 <__addsf3+0x8>
     dc8:	ba 17       	cp	r27, r26
     dca:	62 07       	cpc	r22, r18
     dcc:	73 07       	cpc	r23, r19
     dce:	84 07       	cpc	r24, r20
     dd0:	95 07       	cpc	r25, r21
     dd2:	18 f0       	brcs	.+6      	; 0xdda <__addsf3x+0x18>
     dd4:	71 f4       	brne	.+28     	; 0xdf2 <__addsf3x+0x30>
     dd6:	9e f5       	brtc	.+102    	; 0xe3e <__addsf3x+0x7c>
     dd8:	62 c1       	rjmp	.+708    	; 0x109e <__fp_zero>
     dda:	0e f4       	brtc	.+2      	; 0xdde <__addsf3x+0x1c>
     ddc:	e0 95       	com	r30
     dde:	0b 2e       	mov	r0, r27
     de0:	ba 2f       	mov	r27, r26
     de2:	a0 2d       	mov	r26, r0
     de4:	0b 01       	movw	r0, r22
     de6:	b9 01       	movw	r22, r18
     de8:	90 01       	movw	r18, r0
     dea:	0c 01       	movw	r0, r24
     dec:	ca 01       	movw	r24, r20
     dee:	a0 01       	movw	r20, r0
     df0:	11 24       	eor	r1, r1
     df2:	ff 27       	eor	r31, r31
     df4:	59 1b       	sub	r21, r25
     df6:	99 f0       	breq	.+38     	; 0xe1e <__addsf3x+0x5c>
     df8:	59 3f       	cpi	r21, 0xF9	; 249
     dfa:	50 f4       	brcc	.+20     	; 0xe10 <__addsf3x+0x4e>
     dfc:	50 3e       	cpi	r21, 0xE0	; 224
     dfe:	68 f1       	brcs	.+90     	; 0xe5a <__addsf3x+0x98>
     e00:	1a 16       	cp	r1, r26
     e02:	f0 40       	sbci	r31, 0x00	; 0
     e04:	a2 2f       	mov	r26, r18
     e06:	23 2f       	mov	r18, r19
     e08:	34 2f       	mov	r19, r20
     e0a:	44 27       	eor	r20, r20
     e0c:	58 5f       	subi	r21, 0xF8	; 248
     e0e:	f3 cf       	rjmp	.-26     	; 0xdf6 <__addsf3x+0x34>
     e10:	46 95       	lsr	r20
     e12:	37 95       	ror	r19
     e14:	27 95       	ror	r18
     e16:	a7 95       	ror	r26
     e18:	f0 40       	sbci	r31, 0x00	; 0
     e1a:	53 95       	inc	r21
     e1c:	c9 f7       	brne	.-14     	; 0xe10 <__addsf3x+0x4e>
     e1e:	7e f4       	brtc	.+30     	; 0xe3e <__addsf3x+0x7c>
     e20:	1f 16       	cp	r1, r31
     e22:	ba 0b       	sbc	r27, r26
     e24:	62 0b       	sbc	r22, r18
     e26:	73 0b       	sbc	r23, r19
     e28:	84 0b       	sbc	r24, r20
     e2a:	ba f0       	brmi	.+46     	; 0xe5a <__addsf3x+0x98>
     e2c:	91 50       	subi	r25, 0x01	; 1
     e2e:	a1 f0       	breq	.+40     	; 0xe58 <__addsf3x+0x96>
     e30:	ff 0f       	add	r31, r31
     e32:	bb 1f       	adc	r27, r27
     e34:	66 1f       	adc	r22, r22
     e36:	77 1f       	adc	r23, r23
     e38:	88 1f       	adc	r24, r24
     e3a:	c2 f7       	brpl	.-16     	; 0xe2c <__addsf3x+0x6a>
     e3c:	0e c0       	rjmp	.+28     	; 0xe5a <__addsf3x+0x98>
     e3e:	ba 0f       	add	r27, r26
     e40:	62 1f       	adc	r22, r18
     e42:	73 1f       	adc	r23, r19
     e44:	84 1f       	adc	r24, r20
     e46:	48 f4       	brcc	.+18     	; 0xe5a <__addsf3x+0x98>
     e48:	87 95       	ror	r24
     e4a:	77 95       	ror	r23
     e4c:	67 95       	ror	r22
     e4e:	b7 95       	ror	r27
     e50:	f7 95       	ror	r31
     e52:	9e 3f       	cpi	r25, 0xFE	; 254
     e54:	08 f0       	brcs	.+2      	; 0xe58 <__addsf3x+0x96>
     e56:	b3 cf       	rjmp	.-154    	; 0xdbe <__addsf3+0x1e>
     e58:	93 95       	inc	r25
     e5a:	88 0f       	add	r24, r24
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <__addsf3x+0x9e>
     e5e:	99 27       	eor	r25, r25
     e60:	ee 0f       	add	r30, r30
     e62:	97 95       	ror	r25
     e64:	87 95       	ror	r24
     e66:	08 95       	ret

00000e68 <__divsf3>:
     e68:	0c d0       	rcall	.+24     	; 0xe82 <__divsf3x>
     e6a:	e6 c0       	rjmp	.+460    	; 0x1038 <__fp_round>
     e6c:	de d0       	rcall	.+444    	; 0x102a <__fp_pscB>
     e6e:	40 f0       	brcs	.+16     	; 0xe80 <__divsf3+0x18>
     e70:	d5 d0       	rcall	.+426    	; 0x101c <__fp_pscA>
     e72:	30 f0       	brcs	.+12     	; 0xe80 <__divsf3+0x18>
     e74:	21 f4       	brne	.+8      	; 0xe7e <__divsf3+0x16>
     e76:	5f 3f       	cpi	r21, 0xFF	; 255
     e78:	19 f0       	breq	.+6      	; 0xe80 <__divsf3+0x18>
     e7a:	c7 c0       	rjmp	.+398    	; 0x100a <__fp_inf>
     e7c:	51 11       	cpse	r21, r1
     e7e:	10 c1       	rjmp	.+544    	; 0x10a0 <__fp_szero>
     e80:	ca c0       	rjmp	.+404    	; 0x1016 <__fp_nan>

00000e82 <__divsf3x>:
     e82:	eb d0       	rcall	.+470    	; 0x105a <__fp_split3>
     e84:	98 f3       	brcs	.-26     	; 0xe6c <__divsf3+0x4>

00000e86 <__divsf3_pse>:
     e86:	99 23       	and	r25, r25
     e88:	c9 f3       	breq	.-14     	; 0xe7c <__divsf3+0x14>
     e8a:	55 23       	and	r21, r21
     e8c:	b1 f3       	breq	.-20     	; 0xe7a <__divsf3+0x12>
     e8e:	95 1b       	sub	r25, r21
     e90:	55 0b       	sbc	r21, r21
     e92:	bb 27       	eor	r27, r27
     e94:	aa 27       	eor	r26, r26
     e96:	62 17       	cp	r22, r18
     e98:	73 07       	cpc	r23, r19
     e9a:	84 07       	cpc	r24, r20
     e9c:	38 f0       	brcs	.+14     	; 0xeac <__divsf3_pse+0x26>
     e9e:	9f 5f       	subi	r25, 0xFF	; 255
     ea0:	5f 4f       	sbci	r21, 0xFF	; 255
     ea2:	22 0f       	add	r18, r18
     ea4:	33 1f       	adc	r19, r19
     ea6:	44 1f       	adc	r20, r20
     ea8:	aa 1f       	adc	r26, r26
     eaa:	a9 f3       	breq	.-22     	; 0xe96 <__divsf3_pse+0x10>
     eac:	33 d0       	rcall	.+102    	; 0xf14 <__divsf3_pse+0x8e>
     eae:	0e 2e       	mov	r0, r30
     eb0:	3a f0       	brmi	.+14     	; 0xec0 <__divsf3_pse+0x3a>
     eb2:	e0 e8       	ldi	r30, 0x80	; 128
     eb4:	30 d0       	rcall	.+96     	; 0xf16 <__divsf3_pse+0x90>
     eb6:	91 50       	subi	r25, 0x01	; 1
     eb8:	50 40       	sbci	r21, 0x00	; 0
     eba:	e6 95       	lsr	r30
     ebc:	00 1c       	adc	r0, r0
     ebe:	ca f7       	brpl	.-14     	; 0xeb2 <__divsf3_pse+0x2c>
     ec0:	29 d0       	rcall	.+82     	; 0xf14 <__divsf3_pse+0x8e>
     ec2:	fe 2f       	mov	r31, r30
     ec4:	27 d0       	rcall	.+78     	; 0xf14 <__divsf3_pse+0x8e>
     ec6:	66 0f       	add	r22, r22
     ec8:	77 1f       	adc	r23, r23
     eca:	88 1f       	adc	r24, r24
     ecc:	bb 1f       	adc	r27, r27
     ece:	26 17       	cp	r18, r22
     ed0:	37 07       	cpc	r19, r23
     ed2:	48 07       	cpc	r20, r24
     ed4:	ab 07       	cpc	r26, r27
     ed6:	b0 e8       	ldi	r27, 0x80	; 128
     ed8:	09 f0       	breq	.+2      	; 0xedc <__divsf3_pse+0x56>
     eda:	bb 0b       	sbc	r27, r27
     edc:	80 2d       	mov	r24, r0
     ede:	bf 01       	movw	r22, r30
     ee0:	ff 27       	eor	r31, r31
     ee2:	93 58       	subi	r25, 0x83	; 131
     ee4:	5f 4f       	sbci	r21, 0xFF	; 255
     ee6:	2a f0       	brmi	.+10     	; 0xef2 <__divsf3_pse+0x6c>
     ee8:	9e 3f       	cpi	r25, 0xFE	; 254
     eea:	51 05       	cpc	r21, r1
     eec:	68 f0       	brcs	.+26     	; 0xf08 <__divsf3_pse+0x82>
     eee:	8d c0       	rjmp	.+282    	; 0x100a <__fp_inf>
     ef0:	d7 c0       	rjmp	.+430    	; 0x10a0 <__fp_szero>
     ef2:	5f 3f       	cpi	r21, 0xFF	; 255
     ef4:	ec f3       	brlt	.-6      	; 0xef0 <__divsf3_pse+0x6a>
     ef6:	98 3e       	cpi	r25, 0xE8	; 232
     ef8:	dc f3       	brlt	.-10     	; 0xef0 <__divsf3_pse+0x6a>
     efa:	86 95       	lsr	r24
     efc:	77 95       	ror	r23
     efe:	67 95       	ror	r22
     f00:	b7 95       	ror	r27
     f02:	f7 95       	ror	r31
     f04:	9f 5f       	subi	r25, 0xFF	; 255
     f06:	c9 f7       	brne	.-14     	; 0xefa <__divsf3_pse+0x74>
     f08:	88 0f       	add	r24, r24
     f0a:	91 1d       	adc	r25, r1
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	97 f9       	bld	r25, 7
     f12:	08 95       	ret
     f14:	e1 e0       	ldi	r30, 0x01	; 1
     f16:	66 0f       	add	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	88 1f       	adc	r24, r24
     f1c:	bb 1f       	adc	r27, r27
     f1e:	62 17       	cp	r22, r18
     f20:	73 07       	cpc	r23, r19
     f22:	84 07       	cpc	r24, r20
     f24:	ba 07       	cpc	r27, r26
     f26:	20 f0       	brcs	.+8      	; 0xf30 <__divsf3_pse+0xaa>
     f28:	62 1b       	sub	r22, r18
     f2a:	73 0b       	sbc	r23, r19
     f2c:	84 0b       	sbc	r24, r20
     f2e:	ba 0b       	sbc	r27, r26
     f30:	ee 1f       	adc	r30, r30
     f32:	88 f7       	brcc	.-30     	; 0xf16 <__divsf3_pse+0x90>
     f34:	e0 95       	com	r30
     f36:	08 95       	ret

00000f38 <__fixunssfsi>:
     f38:	98 d0       	rcall	.+304    	; 0x106a <__fp_splitA>
     f3a:	88 f0       	brcs	.+34     	; 0xf5e <__fixunssfsi+0x26>
     f3c:	9f 57       	subi	r25, 0x7F	; 127
     f3e:	90 f0       	brcs	.+36     	; 0xf64 <__fixunssfsi+0x2c>
     f40:	b9 2f       	mov	r27, r25
     f42:	99 27       	eor	r25, r25
     f44:	b7 51       	subi	r27, 0x17	; 23
     f46:	a0 f0       	brcs	.+40     	; 0xf70 <__fixunssfsi+0x38>
     f48:	d1 f0       	breq	.+52     	; 0xf7e <__fixunssfsi+0x46>
     f4a:	66 0f       	add	r22, r22
     f4c:	77 1f       	adc	r23, r23
     f4e:	88 1f       	adc	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	1a f0       	brmi	.+6      	; 0xf5a <__fixunssfsi+0x22>
     f54:	ba 95       	dec	r27
     f56:	c9 f7       	brne	.-14     	; 0xf4a <__fixunssfsi+0x12>
     f58:	12 c0       	rjmp	.+36     	; 0xf7e <__fixunssfsi+0x46>
     f5a:	b1 30       	cpi	r27, 0x01	; 1
     f5c:	81 f0       	breq	.+32     	; 0xf7e <__fixunssfsi+0x46>
     f5e:	9f d0       	rcall	.+318    	; 0x109e <__fp_zero>
     f60:	b1 e0       	ldi	r27, 0x01	; 1
     f62:	08 95       	ret
     f64:	9c c0       	rjmp	.+312    	; 0x109e <__fp_zero>
     f66:	67 2f       	mov	r22, r23
     f68:	78 2f       	mov	r23, r24
     f6a:	88 27       	eor	r24, r24
     f6c:	b8 5f       	subi	r27, 0xF8	; 248
     f6e:	39 f0       	breq	.+14     	; 0xf7e <__fixunssfsi+0x46>
     f70:	b9 3f       	cpi	r27, 0xF9	; 249
     f72:	cc f3       	brlt	.-14     	; 0xf66 <__fixunssfsi+0x2e>
     f74:	86 95       	lsr	r24
     f76:	77 95       	ror	r23
     f78:	67 95       	ror	r22
     f7a:	b3 95       	inc	r27
     f7c:	d9 f7       	brne	.-10     	; 0xf74 <__fixunssfsi+0x3c>
     f7e:	3e f4       	brtc	.+14     	; 0xf8e <__fixunssfsi+0x56>
     f80:	90 95       	com	r25
     f82:	80 95       	com	r24
     f84:	70 95       	com	r23
     f86:	61 95       	neg	r22
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	8f 4f       	sbci	r24, 0xFF	; 255
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	08 95       	ret

00000f90 <__floatunsisf>:
     f90:	e8 94       	clt
     f92:	09 c0       	rjmp	.+18     	; 0xfa6 <__floatsisf+0x12>

00000f94 <__floatsisf>:
     f94:	97 fb       	bst	r25, 7
     f96:	3e f4       	brtc	.+14     	; 0xfa6 <__floatsisf+0x12>
     f98:	90 95       	com	r25
     f9a:	80 95       	com	r24
     f9c:	70 95       	com	r23
     f9e:	61 95       	neg	r22
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	8f 4f       	sbci	r24, 0xFF	; 255
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	99 23       	and	r25, r25
     fa8:	a9 f0       	breq	.+42     	; 0xfd4 <__floatsisf+0x40>
     faa:	f9 2f       	mov	r31, r25
     fac:	96 e9       	ldi	r25, 0x96	; 150
     fae:	bb 27       	eor	r27, r27
     fb0:	93 95       	inc	r25
     fb2:	f6 95       	lsr	r31
     fb4:	87 95       	ror	r24
     fb6:	77 95       	ror	r23
     fb8:	67 95       	ror	r22
     fba:	b7 95       	ror	r27
     fbc:	f1 11       	cpse	r31, r1
     fbe:	f8 cf       	rjmp	.-16     	; 0xfb0 <__floatsisf+0x1c>
     fc0:	fa f4       	brpl	.+62     	; 0x1000 <__floatsisf+0x6c>
     fc2:	bb 0f       	add	r27, r27
     fc4:	11 f4       	brne	.+4      	; 0xfca <__floatsisf+0x36>
     fc6:	60 ff       	sbrs	r22, 0
     fc8:	1b c0       	rjmp	.+54     	; 0x1000 <__floatsisf+0x6c>
     fca:	6f 5f       	subi	r22, 0xFF	; 255
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	8f 4f       	sbci	r24, 0xFF	; 255
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
     fd2:	16 c0       	rjmp	.+44     	; 0x1000 <__floatsisf+0x6c>
     fd4:	88 23       	and	r24, r24
     fd6:	11 f0       	breq	.+4      	; 0xfdc <__floatsisf+0x48>
     fd8:	96 e9       	ldi	r25, 0x96	; 150
     fda:	11 c0       	rjmp	.+34     	; 0xffe <__floatsisf+0x6a>
     fdc:	77 23       	and	r23, r23
     fde:	21 f0       	breq	.+8      	; 0xfe8 <__floatsisf+0x54>
     fe0:	9e e8       	ldi	r25, 0x8E	; 142
     fe2:	87 2f       	mov	r24, r23
     fe4:	76 2f       	mov	r23, r22
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <__floatsisf+0x5e>
     fe8:	66 23       	and	r22, r22
     fea:	71 f0       	breq	.+28     	; 0x1008 <__floatsisf+0x74>
     fec:	96 e8       	ldi	r25, 0x86	; 134
     fee:	86 2f       	mov	r24, r22
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	2a f0       	brmi	.+10     	; 0x1000 <__floatsisf+0x6c>
     ff6:	9a 95       	dec	r25
     ff8:	66 0f       	add	r22, r22
     ffa:	77 1f       	adc	r23, r23
     ffc:	88 1f       	adc	r24, r24
     ffe:	da f7       	brpl	.-10     	; 0xff6 <__floatsisf+0x62>
    1000:	88 0f       	add	r24, r24
    1002:	96 95       	lsr	r25
    1004:	87 95       	ror	r24
    1006:	97 f9       	bld	r25, 7
    1008:	08 95       	ret

0000100a <__fp_inf>:
    100a:	97 f9       	bld	r25, 7
    100c:	9f 67       	ori	r25, 0x7F	; 127
    100e:	80 e8       	ldi	r24, 0x80	; 128
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	08 95       	ret

00001016 <__fp_nan>:
    1016:	9f ef       	ldi	r25, 0xFF	; 255
    1018:	80 ec       	ldi	r24, 0xC0	; 192
    101a:	08 95       	ret

0000101c <__fp_pscA>:
    101c:	00 24       	eor	r0, r0
    101e:	0a 94       	dec	r0
    1020:	16 16       	cp	r1, r22
    1022:	17 06       	cpc	r1, r23
    1024:	18 06       	cpc	r1, r24
    1026:	09 06       	cpc	r0, r25
    1028:	08 95       	ret

0000102a <__fp_pscB>:
    102a:	00 24       	eor	r0, r0
    102c:	0a 94       	dec	r0
    102e:	12 16       	cp	r1, r18
    1030:	13 06       	cpc	r1, r19
    1032:	14 06       	cpc	r1, r20
    1034:	05 06       	cpc	r0, r21
    1036:	08 95       	ret

00001038 <__fp_round>:
    1038:	09 2e       	mov	r0, r25
    103a:	03 94       	inc	r0
    103c:	00 0c       	add	r0, r0
    103e:	11 f4       	brne	.+4      	; 0x1044 <__fp_round+0xc>
    1040:	88 23       	and	r24, r24
    1042:	52 f0       	brmi	.+20     	; 0x1058 <__fp_round+0x20>
    1044:	bb 0f       	add	r27, r27
    1046:	40 f4       	brcc	.+16     	; 0x1058 <__fp_round+0x20>
    1048:	bf 2b       	or	r27, r31
    104a:	11 f4       	brne	.+4      	; 0x1050 <__fp_round+0x18>
    104c:	60 ff       	sbrs	r22, 0
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <__fp_round+0x20>
    1050:	6f 5f       	subi	r22, 0xFF	; 255
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	8f 4f       	sbci	r24, 0xFF	; 255
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	08 95       	ret

0000105a <__fp_split3>:
    105a:	57 fd       	sbrc	r21, 7
    105c:	90 58       	subi	r25, 0x80	; 128
    105e:	44 0f       	add	r20, r20
    1060:	55 1f       	adc	r21, r21
    1062:	59 f0       	breq	.+22     	; 0x107a <__fp_splitA+0x10>
    1064:	5f 3f       	cpi	r21, 0xFF	; 255
    1066:	71 f0       	breq	.+28     	; 0x1084 <__fp_splitA+0x1a>
    1068:	47 95       	ror	r20

0000106a <__fp_splitA>:
    106a:	88 0f       	add	r24, r24
    106c:	97 fb       	bst	r25, 7
    106e:	99 1f       	adc	r25, r25
    1070:	61 f0       	breq	.+24     	; 0x108a <__fp_splitA+0x20>
    1072:	9f 3f       	cpi	r25, 0xFF	; 255
    1074:	79 f0       	breq	.+30     	; 0x1094 <__fp_splitA+0x2a>
    1076:	87 95       	ror	r24
    1078:	08 95       	ret
    107a:	12 16       	cp	r1, r18
    107c:	13 06       	cpc	r1, r19
    107e:	14 06       	cpc	r1, r20
    1080:	55 1f       	adc	r21, r21
    1082:	f2 cf       	rjmp	.-28     	; 0x1068 <__fp_split3+0xe>
    1084:	46 95       	lsr	r20
    1086:	f1 df       	rcall	.-30     	; 0x106a <__fp_splitA>
    1088:	08 c0       	rjmp	.+16     	; 0x109a <__fp_splitA+0x30>
    108a:	16 16       	cp	r1, r22
    108c:	17 06       	cpc	r1, r23
    108e:	18 06       	cpc	r1, r24
    1090:	99 1f       	adc	r25, r25
    1092:	f1 cf       	rjmp	.-30     	; 0x1076 <__fp_splitA+0xc>
    1094:	86 95       	lsr	r24
    1096:	71 05       	cpc	r23, r1
    1098:	61 05       	cpc	r22, r1
    109a:	08 94       	sec
    109c:	08 95       	ret

0000109e <__fp_zero>:
    109e:	e8 94       	clt

000010a0 <__fp_szero>:
    10a0:	bb 27       	eor	r27, r27
    10a2:	66 27       	eor	r22, r22
    10a4:	77 27       	eor	r23, r23
    10a6:	cb 01       	movw	r24, r22
    10a8:	97 f9       	bld	r25, 7
    10aa:	08 95       	ret

000010ac <__mulsf3>:
    10ac:	0b d0       	rcall	.+22     	; 0x10c4 <__mulsf3x>
    10ae:	c4 cf       	rjmp	.-120    	; 0x1038 <__fp_round>
    10b0:	b5 df       	rcall	.-150    	; 0x101c <__fp_pscA>
    10b2:	28 f0       	brcs	.+10     	; 0x10be <__mulsf3+0x12>
    10b4:	ba df       	rcall	.-140    	; 0x102a <__fp_pscB>
    10b6:	18 f0       	brcs	.+6      	; 0x10be <__mulsf3+0x12>
    10b8:	95 23       	and	r25, r21
    10ba:	09 f0       	breq	.+2      	; 0x10be <__mulsf3+0x12>
    10bc:	a6 cf       	rjmp	.-180    	; 0x100a <__fp_inf>
    10be:	ab cf       	rjmp	.-170    	; 0x1016 <__fp_nan>
    10c0:	11 24       	eor	r1, r1
    10c2:	ee cf       	rjmp	.-36     	; 0x10a0 <__fp_szero>

000010c4 <__mulsf3x>:
    10c4:	ca df       	rcall	.-108    	; 0x105a <__fp_split3>
    10c6:	a0 f3       	brcs	.-24     	; 0x10b0 <__mulsf3+0x4>

000010c8 <__mulsf3_pse>:
    10c8:	95 9f       	mul	r25, r21
    10ca:	d1 f3       	breq	.-12     	; 0x10c0 <__mulsf3+0x14>
    10cc:	95 0f       	add	r25, r21
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	55 1f       	adc	r21, r21
    10d2:	62 9f       	mul	r22, r18
    10d4:	f0 01       	movw	r30, r0
    10d6:	72 9f       	mul	r23, r18
    10d8:	bb 27       	eor	r27, r27
    10da:	f0 0d       	add	r31, r0
    10dc:	b1 1d       	adc	r27, r1
    10de:	63 9f       	mul	r22, r19
    10e0:	aa 27       	eor	r26, r26
    10e2:	f0 0d       	add	r31, r0
    10e4:	b1 1d       	adc	r27, r1
    10e6:	aa 1f       	adc	r26, r26
    10e8:	64 9f       	mul	r22, r20
    10ea:	66 27       	eor	r22, r22
    10ec:	b0 0d       	add	r27, r0
    10ee:	a1 1d       	adc	r26, r1
    10f0:	66 1f       	adc	r22, r22
    10f2:	82 9f       	mul	r24, r18
    10f4:	22 27       	eor	r18, r18
    10f6:	b0 0d       	add	r27, r0
    10f8:	a1 1d       	adc	r26, r1
    10fa:	62 1f       	adc	r22, r18
    10fc:	73 9f       	mul	r23, r19
    10fe:	b0 0d       	add	r27, r0
    1100:	a1 1d       	adc	r26, r1
    1102:	62 1f       	adc	r22, r18
    1104:	83 9f       	mul	r24, r19
    1106:	a0 0d       	add	r26, r0
    1108:	61 1d       	adc	r22, r1
    110a:	22 1f       	adc	r18, r18
    110c:	74 9f       	mul	r23, r20
    110e:	33 27       	eor	r19, r19
    1110:	a0 0d       	add	r26, r0
    1112:	61 1d       	adc	r22, r1
    1114:	23 1f       	adc	r18, r19
    1116:	84 9f       	mul	r24, r20
    1118:	60 0d       	add	r22, r0
    111a:	21 1d       	adc	r18, r1
    111c:	82 2f       	mov	r24, r18
    111e:	76 2f       	mov	r23, r22
    1120:	6a 2f       	mov	r22, r26
    1122:	11 24       	eor	r1, r1
    1124:	9f 57       	subi	r25, 0x7F	; 127
    1126:	50 40       	sbci	r21, 0x00	; 0
    1128:	8a f0       	brmi	.+34     	; 0x114c <__mulsf3_pse+0x84>
    112a:	e1 f0       	breq	.+56     	; 0x1164 <__mulsf3_pse+0x9c>
    112c:	88 23       	and	r24, r24
    112e:	4a f0       	brmi	.+18     	; 0x1142 <__mulsf3_pse+0x7a>
    1130:	ee 0f       	add	r30, r30
    1132:	ff 1f       	adc	r31, r31
    1134:	bb 1f       	adc	r27, r27
    1136:	66 1f       	adc	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	91 50       	subi	r25, 0x01	; 1
    113e:	50 40       	sbci	r21, 0x00	; 0
    1140:	a9 f7       	brne	.-22     	; 0x112c <__mulsf3_pse+0x64>
    1142:	9e 3f       	cpi	r25, 0xFE	; 254
    1144:	51 05       	cpc	r21, r1
    1146:	70 f0       	brcs	.+28     	; 0x1164 <__mulsf3_pse+0x9c>
    1148:	60 cf       	rjmp	.-320    	; 0x100a <__fp_inf>
    114a:	aa cf       	rjmp	.-172    	; 0x10a0 <__fp_szero>
    114c:	5f 3f       	cpi	r21, 0xFF	; 255
    114e:	ec f3       	brlt	.-6      	; 0x114a <__mulsf3_pse+0x82>
    1150:	98 3e       	cpi	r25, 0xE8	; 232
    1152:	dc f3       	brlt	.-10     	; 0x114a <__mulsf3_pse+0x82>
    1154:	86 95       	lsr	r24
    1156:	77 95       	ror	r23
    1158:	67 95       	ror	r22
    115a:	b7 95       	ror	r27
    115c:	f7 95       	ror	r31
    115e:	e7 95       	ror	r30
    1160:	9f 5f       	subi	r25, 0xFF	; 255
    1162:	c1 f7       	brne	.-16     	; 0x1154 <__mulsf3_pse+0x8c>
    1164:	fe 2b       	or	r31, r30
    1166:	88 0f       	add	r24, r24
    1168:	91 1d       	adc	r25, r1
    116a:	96 95       	lsr	r25
    116c:	87 95       	ror	r24
    116e:	97 f9       	bld	r25, 7
    1170:	08 95       	ret

00001172 <__udivmodqi4>:
    1172:	99 1b       	sub	r25, r25
    1174:	79 e0       	ldi	r23, 0x09	; 9
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <__udivmodqi4_ep>

00001178 <__udivmodqi4_loop>:
    1178:	99 1f       	adc	r25, r25
    117a:	96 17       	cp	r25, r22
    117c:	08 f0       	brcs	.+2      	; 0x1180 <__udivmodqi4_ep>
    117e:	96 1b       	sub	r25, r22

00001180 <__udivmodqi4_ep>:
    1180:	88 1f       	adc	r24, r24
    1182:	7a 95       	dec	r23
    1184:	c9 f7       	brne	.-14     	; 0x1178 <__udivmodqi4_loop>
    1186:	80 95       	com	r24
    1188:	08 95       	ret

0000118a <itoa>:
    118a:	fb 01       	movw	r30, r22
    118c:	9f 01       	movw	r18, r30
    118e:	e8 94       	clt
    1190:	42 30       	cpi	r20, 0x02	; 2
    1192:	c4 f0       	brlt	.+48     	; 0x11c4 <itoa+0x3a>
    1194:	45 32       	cpi	r20, 0x25	; 37
    1196:	b4 f4       	brge	.+44     	; 0x11c4 <itoa+0x3a>
    1198:	4a 30       	cpi	r20, 0x0A	; 10
    119a:	29 f4       	brne	.+10     	; 0x11a6 <itoa+0x1c>
    119c:	97 fb       	bst	r25, 7
    119e:	1e f4       	brtc	.+6      	; 0x11a6 <itoa+0x1c>
    11a0:	90 95       	com	r25
    11a2:	81 95       	neg	r24
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	64 2f       	mov	r22, r20
    11a8:	77 27       	eor	r23, r23
    11aa:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__udivmodhi4>
    11ae:	80 5d       	subi	r24, 0xD0	; 208
    11b0:	8a 33       	cpi	r24, 0x3A	; 58
    11b2:	0c f0       	brlt	.+2      	; 0x11b6 <itoa+0x2c>
    11b4:	89 5d       	subi	r24, 0xD9	; 217
    11b6:	81 93       	st	Z+, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	a1 f7       	brne	.-24     	; 0x11a6 <itoa+0x1c>
    11be:	16 f4       	brtc	.+4      	; 0x11c4 <itoa+0x3a>
    11c0:	5d e2       	ldi	r21, 0x2D	; 45
    11c2:	51 93       	st	Z+, r21
    11c4:	10 82       	st	Z, r1
    11c6:	c9 01       	movw	r24, r18
    11c8:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <strrev>

000011cc <strrev>:
    11cc:	dc 01       	movw	r26, r24
    11ce:	fc 01       	movw	r30, r24
    11d0:	67 2f       	mov	r22, r23
    11d2:	71 91       	ld	r23, Z+
    11d4:	77 23       	and	r23, r23
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <strrev+0x4>
    11d8:	32 97       	sbiw	r30, 0x02	; 2
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <strrev+0x18>
    11dc:	7c 91       	ld	r23, X
    11de:	6d 93       	st	X+, r22
    11e0:	70 83       	st	Z, r23
    11e2:	62 91       	ld	r22, -Z
    11e4:	ae 17       	cp	r26, r30
    11e6:	bf 07       	cpc	r27, r31
    11e8:	c8 f3       	brcs	.-14     	; 0x11dc <strrev+0x10>
    11ea:	08 95       	ret

000011ec <__udivmodhi4>:
    11ec:	aa 1b       	sub	r26, r26
    11ee:	bb 1b       	sub	r27, r27
    11f0:	51 e1       	ldi	r21, 0x11	; 17
    11f2:	07 c0       	rjmp	.+14     	; 0x1202 <__udivmodhi4_ep>

000011f4 <__udivmodhi4_loop>:
    11f4:	aa 1f       	adc	r26, r26
    11f6:	bb 1f       	adc	r27, r27
    11f8:	a6 17       	cp	r26, r22
    11fa:	b7 07       	cpc	r27, r23
    11fc:	10 f0       	brcs	.+4      	; 0x1202 <__udivmodhi4_ep>
    11fe:	a6 1b       	sub	r26, r22
    1200:	b7 0b       	sbc	r27, r23

00001202 <__udivmodhi4_ep>:
    1202:	88 1f       	adc	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	5a 95       	dec	r21
    1208:	a9 f7       	brne	.-22     	; 0x11f4 <__udivmodhi4_loop>
    120a:	80 95       	com	r24
    120c:	90 95       	com	r25
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	08 95       	ret

00001214 <_exit>:
    1214:	f8 94       	cli

00001216 <__stop_program>:
    1216:	ff cf       	rjmp	.-2      	; 0x1216 <__stop_program>
